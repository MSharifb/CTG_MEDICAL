@model BEPZA_MEDICAL.Web.Areas.CPF.Models.MembershipInformation.MembershipInformationViewModel
@using BEPZA_MEDICAL.Web.Helpers
<script src="@Url.Content(" ~/Scripts/listEditor.js")" type="text/javascript"></script>
<script type="text/javascript">

    $(document).ready(function () {

        $("#divEmpList").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Employee', beforeclose: function (event, ui) { Closing(); } });
        showErrMsg();

    });


    function showErrMsg() {
        if ('@Model.IsError' == "1") {
            var msg = '@Model.ErrMsg'.replace(/#/gi, "<br/>* ");
            $("#message").html("<b>" + msg + "</b>").css("color", "red");
        }
    }

    var APVStatus = '';

    function openEmployee() {

        var url = '@Url.Action("ActiveEmployeeSearchList", "Employee")';
        url = url.replace('CPF', 'PRM');

        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                APVStatus = '';
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');
        return false;
    }
    function openEmployeeforAPV() {
        var url = '@Url.Action("ActiveEmployeeSearchList", "Employee")';
        url = url.replace('CPF', 'PRM');

        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                APVStatus = 'APV';
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');
        return false;
    }


    function setData(id) {
        if (APVStatus == 'APV') {
            $('#ApprovedById').val(id);
            GetAPVEmpInfo();
        }
        else {
            $('#EmployeeId').val(id);
            GetEmployeeInfo();
        }
        $("#divEmpList").dialog('close');
    }


    function Closing() {

    }

    function GetEmployeeInfo() {
        var empId = $('#EmployeeId').val();

        var url = '@Url.Action("GetEmployeeInfo", "MembershipInformation")';
        var form = $('#frm');
        var serializedForm = form.serialize();

        $('#EmployeeCode').val('');
        $('#EmployeeInitial').val('');
        $('#FatherName').val('');
        $('#MotherName').val('');
        $('#EmployeeName').val('');
        $('#DesignationName').val('');
        $('#JoiningDate').val('');
        $('#PermanentDate').val('');

        $("#OfficeName").val('');
        $("#DepartmentName").val('');
        $("#SectionName").val('');
        $("#EmployeeCategory").val('');
        $("#PresentPayScale").val('');
        $("#PresentBasicPay").val('');
        $("#Nationality").val('');
        $("#DateOfBirth").val('');
        $("#PermanentAddress").val('');
        $("#PresentAddress").val('');
        $("#MembershipID").val('');

        if (empId > 0) {
            $.post(url, serializedForm, function (obj) {

                if (obj.Result == 'InActiveEmployee') {
                    alert('Employee must be active for membership.');
                    return;
                }
                else if (obj.Result == 'ConfirmEmployee') {
                    alert('Employee must be permanent for membership.');
                    return;
                }
                else if (obj.Result == false) {
                    alert('System is unable to load data please try again.');
                    return;
                }

                else if (obj.Result == 'ExistEmployee') {
                    alert('This employee already have membership. Please try another.');
                    return;
                }
                else if (obj.Result == 'NoSalaryStructure') {
                    alert('Salary structure of this employee not found. Please set salary structure first.');
                    return;
                }


                else {
                    $("#EmployeeCode").val(obj.EmployeeId);
                    $("#EmployeeInitial").val(obj.EmpID);
                    $('#EmployeeName').val(obj.EmployeeName);
                    $('#FatherName').val(obj.FatherName);
                    $('#MotherName').val(obj.MotherName);
                    $("#DesignationName").val(obj.Designation);
                    $('#JoiningDate').val(obj.JoiningDate);
                    $("#PermanentDate").val(obj.PermanentDate);
                    $("#OfficeName").val(obj.Office);
                    $("#DepartmentName").val(obj.Department);
                    $("#SectionName").val(obj.Section);
                    $("#EmployeeCategory").val(obj.EmployeeCategory);
                    $("#PresentPayScale").val(obj.PresentPayScale);
                    $("#PresentBasicPay").val(obj.PresentBasicPay);
                    $("#Nationality").val(obj.Nationality);
                    $("#DateOfBirth").val(obj.DateOfBirth);
                    $("#PermanentAddress").val(obj.PermanentAddress);
                    $("#PresentAddress").val(obj.PresentAddress);
                    $("#MembershipID").val(obj.EmployeeId);
                    $("#BankId").val(obj.BankId);
                    $("#BankBranchId").val(obj.BranchId);
                    $("#AccountNumber").val(obj.AccountNo);
                    GetApproverList();
                }

            }, "json");

        }
        return false;
    }

    function GetAPVEmpInfo() {
        var empId = $('#ApprovedById').val();

        var url = '@Url.Action("GetEmployeeInfo", "MembershipApplication")';
        var form = $('#frm');
        var serializedForm = form.serialize();

        $('#ApproverEmpId').val('');
        $('#ApproverName').val('');
        $('#ApproverDesignation').val('');
        if (empId > 0) {
            $.post(url, serializedForm, function (obj) {

                if (obj.Result == 'InActiveEmployee') {
                    alert('Employee must be active for membership.');
                    return;
                }

                else {
                    $("#ApproverEmpId").val(obj.EmployeeId);
                    $('#ApproverName').val(obj.EmployeeName);
                    $("#ApproverDesignation").val(obj.Designation);
                }

            }, "json");

        }
        return false;
    }

</script>
<script type="text/javascript">
    $(function () {

        $("#WitnessMembershipID").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("AutoCompleteMembershipList", "MembershipInformation")',
                    type: 'POST',
                    dataType: 'json',
                    data: { term: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.MembershipID, value: item.MembershipID };
                        }));
                    }
                });
            },
            select: function (event, ui) {
                $('#WitnessMembershipID').val(ui.item ? ui.item.value : '');
                GetMembershipInformation(ui.item.value);
            }
        });
        $("#WitnessMembershipID").keydown(function (event) {
            if (event.keyCode == 46 || event.keyCode == 8) {
                $('#WitnessName').val('');
                $('#WitnessAddress').val('');
                $('#WitnessDesignation').val('');
            }
        });

        $("#Witness2MembershipID").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("AutoCompleteMembershipList", "MembershipInformation")',
                    type: 'POST',
                    dataType: 'json',
                    data: { term: request.term },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return { label: item.MembershipID, value: item.MembershipID };
                        }));
                    }
                });
            },
            select: function (event, ui) {
                $('#Witness2MembershipID').val(ui.item ? ui.item.value : '');
                GetMembership2Information(ui.item.value);
            }
        });

        $("#Witness2MembershipID").keydown(function (event) {
            if (event.keyCode == 46 || event.keyCode == 8) {
                $('#Witness2Name').val('');
                $('#Witness2Address').val('');
                $('#Witness2Designation').val('');
            }
        });

    });

    function GetMembershipInformation(witnessMembershipID) {

        var url = '@Url.Action("GetMembershipInformation", "MembershipInformation")';

        if (witnessMembershipID != '') {
            $.post(url, { membershipID: witnessMembershipID }, function (obj) {
                if (obj.Result == false) {
                    $('#WitnessName').val('');
                    $('#WitnessAddress').val('');
                    $('#WitnessDesignation').val('');
                    alert('System is unable to load data please try again.');
                }
                else if (obj.Result == 'Inactive') {
                    $('#WitnessName').val('');
                    $('#WitnessAddress').val('');
                    $('#WitnessDesignation').val('');

                    alert('The selected member is either inactive or not approved.');
                }
                else {
                    $('#WitnessMembershipID').val(obj.WitnessMembershipID);
                    $('#WitnessName').val(obj.WitnessName);
                    $('#WitnessAddress').val(obj.WitnessAddress);
                    $('#WitnessDesignation').val(obj.WitnessDesignation);
                }
            }, "json");
        }
        return false;
    }
    function GetMembership2Information(witnessMembershipID) {

        var url = '@Url.Action("GetMembershipInformation", "MembershipInformation")';

        if (witnessMembershipID != '') {
            $.post(url, { membershipID: witnessMembershipID }, function (obj) {
                if (obj.Result == false) {
                    $('#Witness2Name').val('');
                    $('#Witness2Address').val('');
                    $('#Witness2Designation').val('');
                    alert('System is unable to load data please try again.');
                }
                else if (obj.Result == 'Inactive') {
                    $('#Witness2Name').val('');
                    $('#Witness2Address').val('');
                    $('#Witness2Designation').val('');

                    alert('The selected member is either inactive or not approved.');
                }
                else {
                    $('#Witness2MembershipID').val(obj.WitnessMembershipID);
                    $('#Witness2Name').val(obj.WitnessName);
                    $('#Witness2Address').val(obj.WitnessAddress);
                    $('#Witness2Designation').val(obj.WitnessDesignation);
                }
            }, "json");
        }
        return false;
    }

</script>
@if (Model.Mode == "Edit")
{
    @*@Html.HiddenFor(model => model.ApprovalStatusId)*@
    @*@Html.HiddenFor(model => model.MembershipStatus)     *@
}
    @*@Html.HiddenFor(model => model.ApproveDate)*@
    @*@Html.HiddenFor(model => model.ApprovedById)*@
    <fieldset>
        <legend>Applicant Information</legend>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.EmployeeCode)<label style='color: red'>*</label>
            </span><span class="field">
                @Html.HiddenFor(model => model.EmployeeId)
                @Html.TextBoxFor(model => model.EmployeeCode, new { @class = "read-only", @readonly = true, @style = "text-align:right;" })
                <img src='@Url.Content("~/Content/Images/btn_search.gif")' onclick="return openEmployee();" alt="x" />
            </span><span class="label-right">
                @Html.LabelFor(model => model.OfficeName)
            </span><span class="field">
                @Html.EditorFor(model => model.OfficeName)
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.EmployeeName)
            </span><span class="field">
                @Html.EditorFor(model => model.EmployeeName)
            </span>
            <span class="label-right">
                @Html.LabelFor(model => model.DepartmentName)
            </span>
            <span class="field">
                @Html.EditorFor(model => model.DepartmentName)
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.DesignationName)
            </span><span class="field">
                @Html.EditorFor(model => model.DesignationName)
            </span>
            <span class="label-right">
                @Html.LabelFor(model => model.SectionName)
            </span><span class="field">
                @Html.EditorFor(model => model.SectionName)
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.JoiningDate)
            </span><span class="field">
                @Html.EditorFor(model => model.JoiningDate)
            </span><span class="label-right">
                @Html.LabelFor(model => model.PermanentDate)

            </span><span class="field">
                @Html.EditorFor(model => model.PermanentDate)

            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.PresentPayScale)
            </span><span class="field">
                @Html.EditorFor(model => model.PresentPayScale)
            </span><span class="label-right">
                @Html.LabelFor(model => model.PresentBasicPay)
            </span><span class="field">
                @Html.TextBoxFor(model => model.PresentBasicPay)
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.Nationality)
            </span><span class="field">
                @Html.EditorFor(model => model.Nationality)
            </span><span class="label-right">
                @Html.LabelFor(model => model.DateOfBirth)
            </span><span class="field">
                @Html.EditorFor(model => model.DateOfBirth)
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.PresentAddress)
            </span>
            <span class="field">
                @Html.TextAreaFor(model => model.PresentAddress, new { @maxlength = "500", @class = @"address-area", @readonly = true })
            </span>
            <span class="label-right">
                @Html.LabelFor(model => model.PermanentAddress)
            </span><span class="field">
                @Html.TextAreaFor(model => model.PermanentAddress, new { @maxlength = "500", @class = @"address-area", @readonly = true })
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.EmployeeCategory)
            </span>
            <span class="field">
                @Html.EditorFor(model => model.EmployeeCategory)
            </span>
        </div>
    </fieldset>
    <fieldset>
        <legend></legend>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.ApplicationDate)<label style='color: red'>*</label>
            </span>
            <span class="field">
                @Html.EditorFor(model => model.ApplicationDate)
            </span>
            <span class="label-right">
                @Html.LabelFor(model => model.ApplicationReceiptDate)<label style='color: red'>*</label>
            </span>
            <span class="field">
                @Html.EditorFor(model => model.ApplicationReceiptDate)
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.BankId)
            </span>
            <span class="field">
                @Html.DropDownListFor(model => model.BankId, Model.BankList, @String.Format("{0}", Content.DDLOptionalLabel()))
            </span>
            <span class="label-right">@Html.LabelFor(model => model.BankBranchId)</span>
            <span class="field">
                @Html.DropDownListFor(model => model.BankBranchId, Model.BankBranchList, @String.Format("{0}", Content.DDLOptionalLabel()))
            </span>
        </div>
        <div class="row">
            <span class="label">@Html.LabelFor(model => model.AccountNumber)</span>
            <span class="field">@Html.EditorFor(model => model.AccountNumber)</span>
        </div>
    </fieldset>
    <fieldset>
        <legend>Membership Witness</legend>
        <table style="width:100%">
            <tr>
                <td style="width:50%">
                    <div id="divWitness1" style="width:95%;height:100%">
                        <div class="row">
                            <span class="label" style="width:40%">
                                @Html.LabelFor(model => model.WitnessMembershipID)<label style='color: red'>*</label>
                            </span>
                            <span class="field" style="width:60%">
                                @Html.EditorFor(m => m.WitnessMembershipID, new { style = "width:180px" })
                            </span>
                        </div>
                        <div class="row">
                            <span class="label" style="width:40%">
                                @Html.LabelFor(model => model.WitnessName, new { style = "width:150px" })
                            </span>
                            <span class="field" style="width:60%">
                                @Html.TextBoxFor(m => m.WitnessName, new { style = "width:180px", @class = "read-only", @readonly = true })
                            </span>
                        </div>
                        <div class="row">
                            <span class="label" style="width:40%">
                                @Html.LabelFor(model => model.WitnessDesignation, new { style = "width:150px" })
                            </span>
                            <span class="field" style="width:60%">
                                @Html.TextBoxFor(m => m.WitnessDesignation, new { style = "width:180px", @class = "read-only", @readonly = true })
                            </span>
                        </div>
                        <div class="row">
                            <span class="label" style="width:40%">
                                @Html.LabelFor(model => model.WitnessAddress, new { style = "width:150px" })
                            </span>
                            <span class="field" style="width:60%">
                                @Html.TextBoxFor(m => m.WitnessAddress, new { style = "width:180px", @class = "read-only", @readonly = true })
                            </span>
                        </div>
                    </div>
                </td>
                <td style="width:50%">
                    <div id="divWitness2" style="width:95%;height:100%">
                        <div class="row">
                            <span class="label" style="width:40%">
                                @Html.LabelFor(model => model.Witness2MembershipID)
                            </span>
                            <span class="field" style="width:60%">
                                @Html.EditorFor(m => m.Witness2MembershipID, new { style = "width:180px" })
                            </span>
                        </div>
                        <div class="row">
                            <span class="label" style="width:40%">
                                @Html.LabelFor(model => model.Witness2Name, new { style = "width:150px" })
                            </span>
                            <span class="field" style="width:60%">
                                @Html.TextBoxFor(m => m.Witness2Name, new { style = "width:180px", @class = "read-only", @readonly = true })
                            </span>
                        </div>
                        <div class="row">
                            <span class="label" style="width:40%">
                                @Html.LabelFor(model => model.Witness2Designation, new { style = "width:150px" })
                            </span>
                            <span class="field" style="width:60%">
                                @Html.TextBoxFor(m => m.Witness2Designation, new { style = "width:180px", @class = "read-only", @readonly = true })
                            </span>
                        </div>
                        <div class="row">
                            <span class="label" style="width:40%">
                                @Html.LabelFor(model => model.Witness2Address, new { style = "width:150px" })
                            </span>
                            <span class="field" style="width:60%">
                                @Html.TextBoxFor(m => m.Witness2Address, new { style = "width:180px", @class = "read-only", @readonly = true })
                            </span>
                        </div>
                    </div>
                </td>
            </tr>
        </table>
    </fieldset>
    <fieldset>
        <legend>Membership Approval</legend>
        <div class="row">
            <span class="label">@Html.LabelFor(model => model.MembershipID)<label style='color: red'>*</label></span>
            <span class="field">@Html.EditorFor(model => model.MembershipID)</span>
            @if (Model.EmployeeId > 0)
            {
                <span class="label-right">@Html.LabelFor(model => model.ApproveDate)<label style='color: red'>*</label></span>
                <span class="field">@Html.TextBoxFor(model => model.ApproveDate, "{0:yyyy-MM-dd}", new { @class = "read-only" })</span>
            }
        </div>
        <div class="row">
            @if (Model.EmployeeId > 0)
            {
                <span class="label">@Html.LabelFor(model => model.PermanentDate)<label style='color: red'>*</label></span>
                <span class="field">@Html.EditorFor(model => model.PermanentDate)</span>
            }
        </div>
    </fieldset>

    <fieldset>
        @if (Model.IsConfigurableApprovalFlow)
        {
            <div class="row">
                <span class="label">
                    @Html.LabelFor(model => model.ApprovedById)<label style='color: red'>*</label>
                </span>
                <span class="field-LargeWidth">
                    @Html.DropDownListFor(model => model.ApprovedById, @Model.ApproverList, new { @class = "required" })
                </span>
            </div>
        }
        else
        {
            <div class="row">
                <span class="label">
                    @Html.HiddenFor(model => model.ApprovedById)
                    @Html.LabelFor(model => model.ApprovedById)
                </span>
                <span class="field">
                    @Html.EditorFor(model => model.ApproverEmpId)
                    <img src='@Url.Content("~/Content/Images/btn_search.gif")' onclick="return openEmployeeforAPV();" alt="Find" title="Find" />
                </span>
            </div>
            <div class="row">
                <span class="label">
                    @Html.LabelFor(model => model.ApproverName)
                </span>
                <span class="field">
                    @Html.EditorFor(model => model.ApproverName)
                </span>
            </div>
            <div class="row">
                <span class="label">
                    @Html.LabelFor(model => model.ApproverDesignation)
                </span>
                <span class="field">
                    @Html.EditorFor(model => model.ApproverDesignation)
                </span>
            </div>
        }
    </fieldset>

    <fieldset>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.MembershipAppliedByInOffline)
            </span>
            <span class="field-LargeWidth">
                @Html.TextBoxFor(model => model.MembershipAppliedByInOffline, new { @class = "read-only", @readonly = true })
            </span>
        </div>
        <div class="row">
            <span class="label">
                @Html.LabelFor(model => model.MembershipAppliedDateInOffline)
            </span><span class="field">
                @Html.TextBoxFor(model => model.MembershipAppliedDateInOffline, new { @class = "read-only", @readonly = true })
            </span>
        </div>
    </fieldset>

    @if (Model.EmployeeId > 0)
    {
        <fieldset>
            <legend>Nominee</legend>
            <div class="row">
                <a href="@Url.Action("PersonalNomineeInformationIndex", "PersonalInfo", new {area = "PRM", Id = @Model.EmployeeId, IsMenu = true})"> Goto Nominee Page</a>

            </div>
        </fieldset>

        <fieldset>
            <legend>Inactive Employee PF Membership</legend>
            <div class="row">
                <span class="label">
                    @Html.LabelFor(model => model.MembershipStatus)
                </span>
                <span class="field">
                    @Html.DropDownListFor(model => model.MembershipStatus, Model.MembershipStatusList, @String.Format("{0}", Content.DDLOptionalLabel()))
                </span>
                <span class="label-right">@Html.LabelFor(model => model.InactiveDate)</span>
                <span class="field">
                    @Html.EditorFor(model => model.InactiveDate)
                </span>
            </div>
        </fieldset>
    }
    <div id="divEmpList">
        <iframe id="styleAdvance" width="99%" height="98%" style="border: 0 solid white;
        padding-right: 0;">
            <p>
                Your browser does not support iframes.
            </p>
        </iframe>
    </div>
    <div id="divPhotoViewer">
        <img id="imgThumbView" height="250" width="274" class="imgThumb" src="" />
    </div>
    <script type="text/javascript">

        $(document).ready(function () {

            $("#divPhotoViewer").dialog({ autoOpen: false, resizable: false, modal: true, height: 300, width: 300, title: 'Photo Viewer', beforeclose: function (event, ui) { Close(); } });
            showErrMsg();

        });

        function OpenPhotoViewer(e) {

            var imgSrc = $(e).attr('src');
            $('#imgThumbView').attr('src', imgSrc);

            $("#divPhotoViewer").dialog('open');
            return false;
        }


        function Close() {

        }

        $(document).ready(function () {
            var actionType = '@Model.ActionType';
            if (actionType == "Create") {
                GetApproverList();
            }
        })

        function GetApproverList() {

            var employeeId = $('#EmployeeId').val();
            var id = parseInt(employeeId);

            if (isNaN(id) || id == 0) {
                return;
            };
            $('#ApprovedById').empty();
            var url = '@Url.Action("GetApproverInfo", "MembershipInformation")';
            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json',
                data: { employeeId: employeeId },
                timeout: 5000,
                error: function () {
                    alert('System is unable to load data please try again.');
                },
                success: function (data) {
                    $.each(data, function () {
                        $('#ApprovedById').append($("<option></option>").val(this['Id']).html(this['FullName']));
                    });
                }
            });

            //setTimeout(SetApproverInfo, 2000);

            return false;
        }
    </script>


    <style type="text/css">
        .address-area {
            background: #F2F5F8;
        }

        #JoiningDate {
            height: 25px !important;
        }
    </style>
