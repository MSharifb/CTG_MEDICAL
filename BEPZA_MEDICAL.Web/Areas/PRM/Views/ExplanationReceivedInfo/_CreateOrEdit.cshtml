@model BEPZA_MEDICAL.Web.Areas.PRM.ViewModel.ExplanationReceivedInfoViewModel

@{
    Layout = null;
}

<div class="GroupBox">

    <div class="row">
        <span class="label">
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.ExplanationReceivedEmployeeId)
            @Html.LabelFor(model => model.ComplaintNoteSheetId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @if (Model.strMode == "Edit")
            {   @Html.HiddenFor(model => model.ComplaintNoteSheetId)
                @Html.TextBoxFor(model => model.ComplaintNoteSheetName, new { @class = "read-only", @readonly = true })
            }
            else
            {
                @Html.DropDownListFor(m => m.ComplaintNoteSheetId, Model.ComplaintNoteSheetList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "required" })
            }
        </span>
    </div>
</div>

<fieldset>
    <legend>Complaint History</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.RefNo)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.RefNo, new { @class = "read-only required", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplaintDate, new { @class = "read-only required", @readonly = true })
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDate, new { @class = "read-only required", @readonly = true })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintEmpId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintEmpId, new { @class = "read-only required", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantEmpId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantEmpId,new { @class = "read-only required", @readonly = true })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintEmployeeName, new { @class = "read-only required", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantEmployeeName, new { @class = "read-only required", @readonly = true })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDesignationName, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantDesignationName, new { @class = "read-only", @readonly = true })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintDepartmentName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDepartmentName, new { @class = "read-only", @readonly = true })

        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantDepartmentName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantDepartmentName, new { @class = "read-only", @readonly = true })

        </span>
    </div>
</fieldset>

<fieldset>
    <legend>Notice Information</legend>
    @Html.Partial("_NoticeInfoList")
</fieldset>

<fieldset>
    <legend>Explanation Received Information</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.NoticeTypeId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.DropDownListFor(m => m.NoticeTypeId, Model.NoticeTypeList, @String.Format("{0}", Content.DDLOptionalLabel()))
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ExplanationDate)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.EditorFor(model => model.ExplanationDate)
        </span>

    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ExplanationDetails)
        </span>
        <span class="field" style="width:70%">
            @Html.TextAreaFor(model => model.ExplanationDetails, new { Style = "width:95%", @rows = 10, @maxlength = "500" })
        </span>
        <div class="clear"></div>
    </div>
</fieldset>

<fieldset>
    <legend>Explanation Received By</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ExplanationReceivedByEmpId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ExplanationReceivedByEmpId, new { @class = "read-only", @style = "width:150px", @readonly = true })
            <img src='@Url.Content("~/Content/Images/btn_search.gif")' id="imgEmpSearch" alt="Search" onclick="return openEmployee();" />
        </span>

    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ExplanationReceivedByEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ExplanationReceivedByEmployeeName, new { @class = "read-only", @readonly = true })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ExplanationReceivedByDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ExplanationReceivedByDesignationName, new { @class = "read-only", @readonly = true })
        </span>
    </div>
</fieldset>

<fieldset>
    <legend>Hearing</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.IsHearingRequired)
        </span>
        <span class="field">
            @Html.CheckBoxFor(model => model.IsHearingRequired)
        </span>

    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.Remarks)
        </span>
        <span class="field" style="width:70%">
            @Html.TextAreaFor(model => model.Remarks, new { Style = "width:95%", @rows = 10, @maxlength = "500" })
        </span>
        <div class="clear"></div>
    </div>

</fieldset>

<fieldset>
    <div class="row">
        <span class="label">
            @Html.CheckBoxFor(model => model.IsAddAttachment, new { onclick = "disableUpload();" })
            @Html.LabelFor(model => model.IsAddAttachment)
        </span><span class="field">
            <div id="divFileAttach">
                @Html.HiddenFor(model => model.Attachment)
                @Html.HiddenFor(model => model.FileName)
                <input type="file" name="Attachment" id="Attachment" />
                <a href="@Model.FilePath" visible="true" runat="server" target="_blank">@Model.FileName</a>
            </div>
        </span>
    </div>
</fieldset>
<div class="clear"></div>

<script type="text/javascript">
    $(document).ready(function () {
        disableUpload();
    });

    function disableUpload() {
        var IsSelect = $('#IsAddAttachment').attr('checked');
        if (IsSelect) {
            $('#File').show();
           // $('#spAttachment').show();
            $('#divFileAttach').show();
        }
        else {
            $('#File').hide();
          //  $('#spAttachment').hide();
            $('#divFileAttach').hide();
        }
    }


</script>


<script type="text/javascript">

    $(function () {
        var Url = window.location.href;
        $("#btnClear").live("click", function (event) {
            event.preventDefault();
            window.location.href = Url;
        });
    });

    $(document).ready(function () {
        var val = $('input[name=IsIndividual]:checked').val();
        var chk = $('.chkRestriction')
    });
</script>

<script type="text/javascript">
    $(document).ready(function () {

        var complaintNoteSheetId = $("#ComplaintNoteSheetId").val();
        if (complaintNoteSheetId != null) {
            GetNoticeInfoListByCompalintNoteSheetId(complaintNoteSheetId);
        }
    });

    $('#ComplaintNoteSheetId').live('change', function () {

        $("#RefNo").val('');
        $('#ComplaintDate').val('');
        $("#ComplaintEmpId").val('');
        $("#ComplaintEmployeeName").val('');
        $("#ComplaintDesignationName").val('');
        $("#ComplaintDepartmentName").val('');
        $("#ComplainantEmpId").val('');
        $("#ComplainantEmployeeName").val('');
        $("#ComplainantDesignationName").val('');
        $("#ComplainantDepartmentName").val('');

        //reset notice list
        $('#gridNoticeInfo tbody tr').empty();

        var complaintNoteSheetId = $(this).val();
        GetComplaintNoteInfo(complaintNoteSheetId);

        GetNoticeInfoListByCompalintNoteSheetId(complaintNoteSheetId);
    });

    function GetComplaintNoteInfo(complaintNoteSheetId) {
        var url = '@Url.Action("GetComplaintNoteInfo", "NoteOrderInfo")';
        if (complaintNoteSheetId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ complaintNoteSheetId: complaintNoteSheetId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $("#RefNo").val(obj.RefNo);
                    $('#ComplaintDate').val(obj.ComplaintDate);
                    $("#ComplaintEmpId").val(obj.ComplaintEmpId);
                    $("#ComplaintEmployeeName").val(obj.ComplaintEmployeeName);
                    $("#ComplaintDesignationName").val(obj.ComplaintDesignationName);
                    $("#ComplaintDepartmentName").val(obj.ComplaintDepartmentName);
                    $("#ComplainantEmpId").val(obj.ComplainantEmpId);
                    $("#ComplainantEmployeeName").val(obj.ComplainantEmployeeName);
                    $("#ComplainantDesignationName").val(obj.ComplainantDesignationName);
                    $("#ComplainantDepartmentName").val(obj.ComplainantDepartmentName);

                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }

    function GetNoticeInfoListByCompalintNoteSheetId(complaintNoteSheetId) {
        var url = '@Url.Action("GetNoticeInfoListByCompalintNoteSheetId", "ExplanationReceivedInfo")';
        if (complaintNoteSheetId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ compalintNoteSheetId: complaintNoteSheetId }),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    if (data.length > 1) {
                        var tr;
                        //Append each row to html table
                        for (var i = 0; i < data.length; i++) {
                            tr = $('<tr/>');
                            tr.append("<td>" + parseInt(i + 1) + "</td>");
                            //tr.append("<td>" + data[i].Id + "</td>");
                            tr.append("<td>" + data[i].ComplaintNoteSheetName + "</td>");
                            tr.append("<td>" + data[i].ComplaintDate + "</td>");
                            tr.append("<td>" + data[i].ComplaintEmployeeName + "</td>");
                            tr.append("<td>" + data[i].ComplaintDesignationName + "</td>");
                            tr.append("<td>" + data[i].NoticeTypeName + "</td>");
                            tr.append("<td>" + data[i].NoticeStatus + "</td>");
                            tr.append("<td>" + '<a href="#" title="dettails" onclick="ViewNoticeDetails(this,' + data[i].Id + ')"><img src="../../Content/Images/view.png" style="border: none;" alt="view"></a>' + "</td>");
                            $('#gridNoticeInfo tbody').append(tr);
                        }
                    }
                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }

</script>

@*View Notice Details*@

<div id="divNoticeInfo">
    <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white;
        padding-right: 0px;">
        <p>
            Your browser does not support iframes.
        </p>
    </iframe>
</div>


<script type="text/javascript">

    $(document).ready(function () {
        $("#divNoticeInfo").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Notice Information', beforeclose: function (event, ui) { ClosingNotice(); } });
       showErrMsg();
    });

    function showErrMsg() {
        if ('@Model.errClass' == "success" && '@Model.IsError' == "0") {
            $('input[name="btnSave"]').hide();
        }
    }

    function ViewNoticeDetails(el, noticeId) {
        var url = '@Url.Action("ViewNoticeDetails", "NoticeInfo")';
        if (noticeId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                data: { id: noticeId },
                error: function () {
                    alert('System is unable to load data please try again.');
                },
                success: function (result) {
                    $('#divNoticeInfo').html(result);
                }
            });

            $("#divNoticeInfo").dialog('open');
            return false;
        }
    }

    function ClosingNotice() {

    }

</script>


@*End Notice Details*@

@*Employee Info*@

<div id="divEmpList">
    <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white;
        padding-right: 0px;">
        <p>
            Your browser does not support iframes.
        </p>
    </iframe>
</div>
<br />
<div class="clear">
</div>


<script type="text/javascript">

    $(document).ready(function () {

        $("#divEmpList").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Employee', beforeclose: function (event, ui) { Closing(); } });
        //showErrMsg();
    });
    function openEmployee() {

        var url = '@Url.Action("EmployeeSearch", "Employee")?searchEmpType=active';

        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            timeout: 5000,
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');

        return false;
    }

    function setData(id) {
        $('#ExplanationReceivedEmployeeId').val(id);
        GetEmployeeInfo(id);
        $("#divEmpList").dialog('close');

    }
    function GetEmployeeInfo(empId) {
        var url = '@Url.Action("GetEmployeeInfo", "ExplanationReceivedInfo")';
        if (empId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ empId: empId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $("#ExplanationReceivedByEmpId").val(obj.EmpId);
                    $('#ExplanationReceivedByEmployeeName').val(obj.EmployeeName);
                    $("#ExplanationReceivedByDesignationName").val(obj.DesignationName);
                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }


    function Closing() {

    }

</script>
@*End Employee Info*@



