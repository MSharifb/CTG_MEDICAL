@model BEPZA_MEDICAL.Web.Areas.PRM.ViewModel.ACRforOfficer.OfficerPerformanceofWorkViewModel

@{
    Layout = null;
}
@using (Html.BeginForm(Model.ActionType, "ACRforOfficer"))
{
    <fieldset>
        <div class="message">
            @if (!string.IsNullOrEmpty(Model.Message))
            {
                <div class="@Model.ErrorClass">
                    @Model.Message
                </div>
            }
            @Html.ValidationSummary(false, BEPZA_MEDICAL.Web.Utility.Common.ValidationSummaryHead)
        </div>
        <div class="GroupBox">
            <div class="row">
                <span class="label">
                    @Html.HiddenFor(model => model.OfficerInfoId)
                    @Html.HiddenFor(model => model.EmployeeId)
                    @Html.LabelFor(model => model.EmpId)
                </span>
                <span class="field">
                    @Html.TextBoxFor(model => model.EmpId, new { @class = "read-only", @readonly = true })
                </span>
                <span class="label-right">
                    @Html.LabelFor(model => model.ACRDate)
                </span><span class="field">
                    @Html.TextBoxFor(model => model.ACRDate, new { @class = "read-only", @readonly = true })
                </span>
            </div>
            <div class="row">
                <span class="label">
                    @Html.LabelFor(model => model.EmployeeName)
                </span><span class="field">
                    @Html.TextBoxFor(model => model.EmployeeName, new { @class = "read-only", @readonly = true })
                </span>
                <span class="label-right">
                    @Html.LabelFor(model => model.ACRPeriodFrom)
                </span><span class="field">
                    @Html.TextBoxFor(model => model.ACRPeriodFrom, new { @class = "read-only", @readonly = true })
                </span>

            </div>
            <div class="row">
                <span class="label">
                    @Html.LabelFor(model => model.EmployeeDesignation)
                </span><span class="field">
                    @Html.TextBoxFor(model => model.EmployeeDesignation, new { @class = "read-only", @readonly = true })
                </span>
                <span class="label-right">
                    @Html.LabelFor(model => model.ACRPeriodTo)
                </span><span class="field">
                    @Html.TextBoxFor(model => model.ACRPeriodTo, new { @class = "read-only", @readonly = true })
                </span>
            </div>

            <div class="row">
                <span class="label">
                    @Html.LabelFor(model => model.EmployeeDepartment)
                </span><span class="field">
                    @Html.TextBoxFor(model => model.EmployeeDepartment, new { @class = "read-only", @readonly = true })
                </span>
                <span class="label-right">
                    @Html.LabelFor(model => model.SeniorityNumber)
                </span><span class="field">
                    @Html.TextBoxFor(model => model.SeniorityNumber, new { @class = "read-only", @readonly = true })
                </span>

            </div>
        </div>
    </fieldset>
    <div class="GroupBox">
        <div class="row" align="center">
            <div style="width: 80%">
                <div class="clear"></div>
                <table id="grid" class="contenttable">
                    <thead>
                        <tr>
                            <th>
                                #
                            </th>
                            <th>
                                Attributes
                            </th>
                            <th>
                                4
                            </th>
                            <th>
                                3
                            </th>
                            <th>
                                2
                            </th>
                            <th>
                                1
                            </th>

                        </tr>
                    </thead>

                    <tbody>
                        @for (int i = 0; i < Model.AttributeDetailList.Count; i++)
                        {
                            var item1 = Model.AttributeDetailList.ToList()[i];
                            <tr>
                                <td style="display: none;">
                                    @Html.HiddenFor(m => m.AttributeDetailList[i].Id)
                                </td>
                                <td style="display: none;">
                                    @Html.HiddenFor(m => m.AttributeDetailList[i].OfficerInfoId)
                                </td>
                                <td style="display: none;">
                                    @Html.HiddenFor(m => m.AttributeDetailList[i].AttributeDetailId)
                                </td>
                                <td style="display: none;">
                                    @Html.HiddenFor(m => m.AttributeDetailList[i].SerialNumber)
                                </td>
                                <td style="display: none;">
                                    @Html.HiddenFor(m => m.AttributeDetailList[i].AttributeName)
                                </td>
                                <td>
                                    <label> @item1.SerialNumber</label>
                                </td>
                                <td style="text-align:left">
                                    <label> @item1.AttributeName</label>
                                </td>
                                <td>
                                    @Html.CheckBoxFor(m => m.AttributeDetailList[i].ChkFour, new { @chkValue = "4" })
                                </td>
                                <td>
                                    @Html.CheckBoxFor(m => m.AttributeDetailList[i].ChkThree, new { @chkValue = "3" })
                                </td>
                                <td>
                                    @Html.CheckBoxFor(m => m.AttributeDetailList[i].CkhTwo, new { @chkValue = "2" })
                                </td>
                                <td>
                                    @Html.CheckBoxFor(m => m.AttributeDetailList[i].ChkOne, new { @chkValue = "1" })
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <fieldset>
                <legend>Total Obtain Marks </legend>
                <div style="width: 70%">
                    <div class="row">
                        <span class="label">
                            @Html.HiddenFor(model => model.PersonalCharacterMarks)
                            @Html.Label("Total Obtain Marks")
                        </span><span class="field">
                            @Html.TextBoxFor(model => model.TotalObtainMarks, new { @class = "read-only", @readonly = true })
                        </span>
                    </div>
                    <table id="Mark" class="contenttable custom-grid">
                        <thead>
                            <tr>
                                <th>
                                    Rank Name
                                </th>
                                <th>
                                    From Mark
                                </th>
                                <th>
                                    To Mark
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.MarkList.Count; i++)
                            {
                                var item2 = Model.MarkList.ToList()[i];
                                <tr>
                                    <td style="display: none;">
                                        @Html.HiddenFor(m => m.MarkList[i].RankName)
                                    </td>
                                    <td style="display: none;">
                                        @Html.HiddenFor(m => m.MarkList[i].FromMark)
                                    </td>
                                    <td style="display: none;">
                                        @Html.HiddenFor(m => m.MarkList[i].ToMark)
                                    </td>
                                    <td style="text-align:left">
                                        <label> @item2.RankName</label>
                                    </td>
                                    <td>
                                        <label> @item2.FromMark</label>
                                    </td>
                                    <td>
                                        <label> @item2.ToMark</label>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </fieldset>
            <div class="GroupBox">
                <div class="row">
                    <span class="label" style="width:200px;">
                        @Html.HiddenFor(model => model.ReportingOfficerId)
                        @Html.LabelFor(model => model.NameOfReportingOfficer, new { @class = "label-required" })
                    </span>
                    <span class="field">
                        @Html.TextBoxFor(model => model.NameOfReportingOfficer, new { @class = "read-only required", @readonly = true })
                        @*<img src='@Url.Content("~/Content/Images/btn_search.gif")' id="imgEmpSearch" alt="Search" onclick="return openEmployee();" />*@
                    </span>
                </div>
                <div class="row">
                    <span class="label" style="width:200px;">
                        @Html.LabelFor(model => model.Designation)
                    </span><span class="field">
                        @Html.TextBoxFor(model => model.Designation, new { @class = "read-only", @readonly = true })
                    </span>
                </div>
            </div>
            <div class="clear" style="height:10px">
            </div>
        </div>
        <div class="GroupBox">
            <div class="row">
                <span class="label">
                    @Html.LabelFor(model => model.NextApproverId, new { @class = "label-required" })
                </span><span class="field">
                    @Html.DropDownListFor(model => model.NextApproverId, @Model.ApproverList)
                </span>
            </div>
        </div>
        <div class="clear">
        </div>
        <div class="button-crude">
            @if ((new BEPZA_MEDICAL.Web.Utility.AppConstant()).IsAddAssigned || (new BEPZA_MEDICAL.Web.Utility.AppConstant()).IsEditAssigned)
            {
                <input type="submit" value="@Model.ButtonText" name="btnCreate" id="btnCreate" style="margin: 0 10px 0 0;" />
            }
            @if (Model.DeleteEnable && (new BEPZA_MEDICAL.Web.Utility.AppConstant()).IsDeleteAssigned)
            {
                @Html.ActionLink("Delete", "DeletePerformanceOfWork", new { id = Model.OfficerInfoId }, new { @class = "delete-confirm", @style = "margin: 0 10px 0 0;" })
            }
            <div class="clear">
            </div>
        </div>


    </div>
}
<div id="divEmpList">
    <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white;
        padding-right: 0px;">
        <p>
            Your browser does not support iframes.
        </p>
    </iframe>
</div>

<div class="button-crude button-left" style="float: left;">
    @Html.ActionLink("Back to List", "Index")
</div>
<br />
<div class="clear">
</div>

<script type="text/javascript">

    $(document).ready(function () {

        $("#divEmpList").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Employee', beforeclose: function (event, ui) { Closing(); } });
        //showErrMsg();
    });

    function openEmployee() {

        var url = '@Url.Action("EmployeeSearch", "Employee")?searchEmpType=active';

        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            timeout: 5000,
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');

        return false;
    }

    function setData(id) {
        $('#ReportingOfficerId').val(id);
        GetEmployeeInfo(id);
        $("#divEmpList").dialog('close');

    }

    function GetEmployeeInfo(empId) {
        var url = '@Url.Action("GetEmployeeInfo", "EmployeeClearanceInfo")';
        if (empId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ empId: empId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $('#NameOfReportingOfficer').val(obj.EmployeeName);
                    $("#Designation").val(obj.Designation);
                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }

    function Closing() {

    }

</script>

<script type="text/javascript">
    var totalObtainMark = $('#PersonalCharacterMarks').val();
    //var total = 0;

    $('input[type="checkbox"]').live('click', function () {
        $(this).closest('tr').find('input').not(this).attr('checked', false);
        var tempTotal = 0;
        $("#grid tbody tr").each(function () {
            if ($(this).find('input[type="checkbox"]').is(':checked')) {
                var ss = $(this).find('input[type=checkbox]:checked').attr('chkvalue');
                tempTotal = parseInt(tempTotal) + parseInt(ss);
            }
            //return total = tempTotal;
        });

        $('#TotalObtainMarks').val(parseInt(totalObtainMark) + tempTotal);
    });


</script>