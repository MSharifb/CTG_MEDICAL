@model BEPZA_MEDICAL.Web.Areas.PRM.ViewModel.FIRInfoViewModel

@{
    Layout = null;
}

<div class="GroupBox">

    <div class="row">
        <span class="label">
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.SignatoryEmployeeId)
            @Html.LabelFor(model => model.ComplaintNoteSheetId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @if (Model.strMode == "Edit")
            {   @Html.HiddenFor(model => model.ComplaintNoteSheetId)
                @Html.TextBoxFor(model => model.ComplaintNoteSheetName, new { @class = "read-only", @readonly = true })
            }
            else
            {
                @Html.DropDownListFor(m => m.ComplaintNoteSheetId, Model.ComplaintNoteSheetList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "required" })
            }
          
        </span>
    </div>
</div>

@*<div class="GroupBox">*@
<fieldset>
    <legend>FIR Information</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FIRDate)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.EditorFor(model => model.FIRDate)
        </span>

    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FIRDescription)
            <label class="required-field">*</label>
        </span>
        <span class="field" style="width:70%">
            @Html.TextAreaFor(model => model.FIRDescription, new { Style = "width:95%", @rows = 10, @maxlength = "500" })
      
          </span>

    </div>
    <div class="row">
       <span class="label">&nbsp;</span>
        <span class="field" style="width:35%">
            <fieldset>
                <legend>Signatory</legend>
                <div class="row">
                    <span class="label" style="width:50%">
                        @Html.LabelFor(model => model.SignatoryEmpId)
                        <label class="required-field">*</label>
                    </span>
                    <span class="field">
                        @Html.TextBoxFor(model => model.SignatoryEmpId, new { @class = "read-only", @style = "width:150px", @readonly = true })
                        <img src='@Url.Content("~/Content/Images/btn_search.gif")' id="imgEmpSearch" alt="Search" onclick="return openEmployee();" />
                    </span>

                </div>
                <div class="row">
                    <span class="label" style="width:50%">
                        @Html.LabelFor(model => model.SignatoryEmployeeName)
                        <label class="required-field">*</label>
                    </span>
                    <span class="field">
                        @Html.TextBoxFor(model => model.SignatoryEmployeeName, new { @class = "read-only", @style = "width:150px", @readonly = true })
                    </span>
                </div>

                <div class="row">
                    <span class="label" style="width:50%">
                        @Html.LabelFor(model => model.SignatoryDesignationName)
                    </span>
                    <span class="field">
                        @Html.TextBoxFor(model => model.SignatoryDesignationName, new { @class = "read-only", @style = "width:150px", @readonly = true })
                    </span>
                </div>
            </fieldset>
        </span>
    </div>
</fieldset>

<fieldset>
    <legend>Complaint Information</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.RefNo)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.RefNo, new { @class = "read-only required", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplaintDate)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.EditorFor(model => model.ComplaintDate, new { @class = "required" })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintEmployeeName, new { @class = "read-only required", @readonly = true })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDesignationName, new { @class = "read-only", @readonly = true })
        </span>

        <span class="label-right">
            @Html.LabelFor(model => model.ComplaintDepartmentName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDepartmentName, new { @class = "read-only", @readonly = true })

        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintDetails)
            <label class="required-field">*</label>
        </span>
        <span class="field" style="width:70%">
            @Html.TextAreaFor(model => model.ComplaintDetails, new { @class = "read-only required", @readonly = true, Style = "width:95%", @rows = 10 })
        </span>

    </div>
</fieldset>


<fieldset>
    <legend>Complainant Information</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplainantEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantEmployeeName, new { @class = "read-only required", @readonly = true })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplainantDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantDesignationName, new { @class = "read-only", @readonly = true })
        </span>

        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantDepartmentName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantDepartmentName, new { @class = "read-only", @readonly = true })

        </span>
    </div>
</fieldset>

<div class="clear"></div>
<script type="text/javascript">

    $(function () {
        var Url = window.location.href;
        $("#btnClear").live("click", function (event) {
            event.preventDefault();
            window.location.href = Url;
        });

        var val = $('input[name=IsIndividual]:checked').val();
        var chk = $('.chkRestriction');
    });

    $("#FIRDate").live('change', function () {
        $("#message").empty();
        var cDate = new Date();
        var giveDate = new Date($('#FIRDate').val());

        if (cDate < giveDate) {
            // Do something
            $("#message").html("<div class=\"validation-summary-errors\" data-valmsg-summary=\"true\"> <span> Date of FIR can not be greater than current date. </span>  </div> ");
            $('#FIRDate').val('');
            return;
        }

    });
</script>

<script type="text/javascript">

    $('#ComplaintNoteSheetId').live('change', function () {
        $("#message").html('');
        $("#RefNo").val('');
        $('#ComplaintDate').val('');
        $("#ComplaintEmployeeName").val('');
        $("#ComplaintDesignationName").val('');
        $("#ComplaintDepartmentName").val('');
        $("#ComplaintDetails").val('');
        $("#ComplainantEmployeeName").val('');
        $("#ComplainantDesignationName").val('');
        $("#ComplainantDepartmentName").val('');

        var complaintNoteSheetId = $(this).val();
        GetComplaintNoteInfo(complaintNoteSheetId);

    });
    
    function GetComplaintNoteInfo(complaintNoteSheetId) {
        var url = '@Url.Action("GetComplaintNoteInfo", "NoteOrderInfo")';
        if (complaintNoteSheetId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ complaintNoteSheetId: complaintNoteSheetId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    if (!obj.Success) {
                        $("#message").html('<span style=\"color:red\"> Not eligible for this. Eligible for ' + obj.OrderType + '.</span>');
                        return false;
                    }
                    $("#RefNo").val(obj.RefNo);
                    $('#ComplaintDate').val(obj.ComplaintDate);
                    $("#ComplaintEmployeeName").val(obj.ComplaintEmployeeName);
                    $("#ComplaintDesignationName").val(obj.ComplaintDesignationName);
                    $("#ComplaintDepartmentName").val(obj.ComplaintDepartmentName);
                    $("#ComplaintDetails").val(obj.ComplaintDetails);
                    $("#ComplainantEmployeeName").val(obj.ComplainantEmployeeName);
                    $("#ComplainantDesignationName").val(obj.ComplainantDesignationName);
                    $("#ComplainantDepartmentName").val(obj.ComplainantDepartmentName);

                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }

</script>

@*Employee Info*@

<div id="divEmpList">
    <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white;
        padding-right: 0px;">
        <p>
            Your browser does not support iframes.
        </p>
    </iframe>
</div>
<br />
<div class="clear">
</div>


<script type="text/javascript">
        
    $(document).ready(function () {

        $("#divEmpList").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Employee', beforeclose: function (event, ui) { Closing(); } });
        showErrMsg();
    });

    function showErrMsg() {      
        if ('@Model.errClass' == "success" && '@Model.IsError' == "0") {           
            $('input[name="btnSave"]').hide();
        }
        @*if ('@Model.IsError' == "0") {
            var msg = '@Model.ErrMsg'.replace(/#/gi, "<br/>* ");
            $("#message").html("<b>" + msg + "</b>").css("color", "green");
        }*@
    }

    function openEmployee() {
        var url = '@Url.Action("EmployeeSearch", "Employee")?searchEmpType=active';
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            timeout: 5000,
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');
        return false;
    }

    function setData(id) {
        $('#SignatoryEmployeeId').val(id);
        GetEmployeeInfo(id);
        $("#divEmpList").dialog('close');

    }
    function GetEmployeeInfo(empId) {
        var url = '@Url.Action("GetEmployeeInfo", "NoteOrderInfo")';
        if (empId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ empId: empId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $("#SignatoryEmpId").val(obj.EmpId);
                    $('#SignatoryEmployeeName').val(obj.EmployeeName);
                    $("#SignatoryDesignationName").val(obj.DesignationName);
                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }


    function Closing() {

    }

</script>
@*End Employee Info*@


