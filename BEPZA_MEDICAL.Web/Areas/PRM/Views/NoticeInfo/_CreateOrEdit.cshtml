@model BEPZA_MEDICAL.Web.Areas.PRM.ViewModel.NoticeInfoViewModel

@{
    Layout = null;
}

<div class="GroupBox">

    <div class="row">
        <span class="label">
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.NoticeIssueByEmployeeId)
            @Html.LabelFor(model => model.ComplaintNoteSheetId)
            @Html.HiddenFor(model => model.IsIssueNotice)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @if (Model.strMode == "Edit")
            {   @Html.HiddenFor(model => model.ComplaintNoteSheetId)
                @Html.TextBoxFor(model => model.ComplaintNoteSheetName, new { @class = "read-only", @readonly = true })
            }
            else
            {
                @Html.DropDownListFor(m => m.ComplaintNoteSheetId, Model.ComplaintNoteSheetList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "required" })
            }
        </span>
    </div>
</div>
<fieldset>
    <legend>Complaint History</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.RefNo)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.RefNo, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplaintDate)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.EditorFor(model => model.ComplaintDate)
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintEmpId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintEmpId, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantEmpId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.EditorFor(model => model.ComplainantEmpId)
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintEmployeeName, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantEmployeeName, new { @class = "read-only", @readonly = true })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDesignationName, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantDesignationName, new { @class = "read-only", @readonly = true })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintDepartmentName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDepartmentName, new { @class = "read-only", @readonly = true })

        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantDepartmentName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantDepartmentName, new { @class = "read-only", @readonly = true })

        </span>
    </div>
</fieldset>

<fieldset>
    <legend>Notice Information</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.NoticeDate)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.EditorFor(model => model.NoticeDate)
        </span>
        <span class="label">
            @Html.LabelFor(model => model.NoticeRefNo)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.NoticeRefNo)
        </span>

    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.NoticeTypeId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.DropDownListFor(m => m.NoticeTypeId, Model.NoticeTypeList, @String.Format("{0}", Content.DDLOptionalLabel()))
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.NoticeDetails)
        </span>
        <span class="field" style="width:70%">
            @Html.TextAreaFor(model => model.NoticeDetails, new { Style = "width:95%", @rows = 10, @maxlength = "500" })
        </span>
        <div class="clear"></div>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ExplanationLastDate)
        </span>
        <span class="field" style="width:80%">
            @Html.EditorFor(model => model.ExplanationLastDate)
        </span>
        <div class="clear"></div>
    </div>
</fieldset>

<fieldset>
    <legend>Notice Issue By</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.NoticeIssueByEmpId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.NoticeIssueByEmpId, new { @class = "read-only", @style = "width:150px", @readonly = true })
            <img src='@Url.Content("~/Content/Images/btn_search.gif")' id="imgEmpSearch" alt="Search" onclick="return openEmployee();" />
        </span>

    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.NoticeIssueByEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.NoticeIssueByEmployeeName, new { @class = "read-only", @readonly = true })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.NoticeIssueByDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.NoticeIssueByDesignationName, new { @class = "read-only", @readonly = true })
        </span>
    </div>
</fieldset>

<fieldset>
    <div class="row">
        <span class="label">
            @Html.CheckBoxFor(model => model.IsAddAttachment, new { onclick = "disableUpload();" })
            @Html.LabelFor(model => model.IsAddAttachment)
        </span>
        <span class="field">
            <div id="divFileAttach">
                @Html.HiddenFor(model => model.Attachment)
                @Html.HiddenFor(model => model.FileName)
                <input type="file" name="Attachment" id="Attachment" />
                <a href="@Model.FilePath" visible="true" runat="server" target="_blank">@Model.FileName</a>
            </div>
        </span>
    </div>

</fieldset>
<div class="clear"></div>

<script type="text/javascript">
    $(document).ready(function () {
        disableUpload();
    });

    function disableUpload() {
        var IsSelect = $('#IsAddAttachment').attr('checked');
        if (IsSelect) {
            $('#File').show();
           // $('#spAttachment').show();
            $('#divFileAttach').show();
        }
        else {
            $('#File').hide();
            //$('#spAttachment').hide();
            $('#divFileAttach').hide();
        }
    }

    $('#btnIsIssueNotice').live('click', function () {
        $('#IsIssueNotice').val(true);
    })

</script>


<script type="text/javascript">

    $(function () {
        var Url = window.location.href;
        $("#btnClear").live("click", function (event) {
            event.preventDefault();
            window.location.href = Url;
        });
    });

    $(document).ready(function () {
        var val = $('input[name=IsIndividual]:checked').val();
        var chk = $('.chkRestriction')
    });
</script>

<script type="text/javascript">


    $('#ComplaintNoteSheetId').live('change', function () {

        $("#RefNo").val('');
        $('#ComplaintDate').val('');
        $("#ComplaintEmpId").val('');
        $("#ComplaintEmployeeName").val('');
        $("#ComplaintDesignationName").val('');
        $("#ComplaintDepartmentName").val('');
        $("#ComplainantEmpId").val('');
        $("#ComplainantEmployeeName").val('');
        $("#ComplainantDesignationName").val('');
        $("#ComplainantDepartmentName").val('');

        var complaintNoteSheetId = $(this).val();
        GetComplaintNoteInfo(complaintNoteSheetId);

    });

    function GetComplaintNoteInfo(complaintNoteSheetId) {
        var url = '@Url.Action("GetComplaintNoteInfo", "NoteOrderInfo")';
        if (complaintNoteSheetId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ complaintNoteSheetId: complaintNoteSheetId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $("#RefNo").val(obj.RefNo);
                    $('#ComplaintDate').val(obj.ComplaintDate);
                    $("#ComplaintEmpId").val(obj.ComplaintEmpId);
                    $("#ComplaintEmployeeName").val(obj.ComplaintEmployeeName);
                    $("#ComplaintDesignationName").val(obj.ComplaintDesignationName);
                    $("#ComplaintDepartmentName").val(obj.ComplaintDepartmentName);
                    $("#ComplainantEmpId").val(obj.ComplainantEmpId);
                    $("#ComplainantEmployeeName").val(obj.ComplainantEmployeeName);
                    $("#ComplainantDesignationName").val(obj.ComplainantDesignationName);
                    $("#ComplainantDepartmentName").val(obj.ComplainantDepartmentName);

                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }

</script>

@*Employee Info*@

<div id="divEmpList">
    <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white;
        padding-right: 0px;">
        <p>
            Your browser does not support iframes.
        </p>
    </iframe>
</div>
<br />
<div class="clear">
</div>


<script type="text/javascript">

    $(document).ready(function () {

        $("#divEmpList").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Employee', beforeclose: function (event, ui) { Closing(); } });
        showErrMsg();
    });

    function showErrMsg() {
        if ('@Model.errClass' == "success" && '@Model.IsError' == "0") {
            $('input[name="btnSave"]').hide();
        }
    }

    function openEmployee() {

        var url = '@Url.Action("EmployeeSearch", "Employee")?searchEmpType=active';

        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            timeout: 5000,
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');

        return false;
    }

    function setData(id) {
        $('#NoticeIssueByEmployeeId').val(id);
        GetEmployeeInfo(id);
        $("#divEmpList").dialog('close');

    }
    function GetEmployeeInfo(empId) {
        var url = '@Url.Action("GetEmployeeInfo", "NoticeInfo")';
        if (empId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ empId: empId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $("#NoticeIssueByEmpId").val(obj.EmpId);
                    $('#NoticeIssueByEmployeeName').val(obj.EmployeeName);
                    $("#NoticeIssueByDesignationName").val(obj.DesignationName);
                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }


    function Closing() {

    }

</script>
@*End Employee Info*@


<script type="text/javascript">
    $(function () {
        //cascading dropdown
        $("select#DisciplinaryActionTypeId").change(function () {
            LoadPunishmentType();
        })

    });

    function LoadPunishmentType() {
        var selectedDisciplinaryActionType = $('select#DisciplinaryActionTypeId').val();
        var PunishmentTypeSelect = $('select#PunishmentTypeInfoId');
        PunishmentTypeSelect.empty();
        PunishmentTypeSelect.append($('<option/>', {
            value: '',
            text: '@Content.DDLOptionalLabel()'
        }));
        if (selectedDisciplinaryActionType != null && selectedDisciplinaryActionType != '') {
            $.getJSON('@Url.Action("GetPunishmentType", "NoteOrderInfo")', { disciplinaryActionTypeId: selectedDisciplinaryActionType }, function (data) {
                $.each(data.punishments, function (index, punishment) {
                    PunishmentTypeSelect.append($('<option/>', {
                        value: punishment.Id,
                        text: punishment.PunishmentName
                    }));
                    $('select#PunishmentTypeInfoId').val($('input#PunishmentTypeInfoId').val());
                });
            });
        }
        else {
            $("#PunishmentTypeInfoId>option").remove();
            $("#PunishmentTypeInfoId").html("<option value=\"" + "" + "\">" + "[Select One]" + "</option>");
        }
    }
</script>


