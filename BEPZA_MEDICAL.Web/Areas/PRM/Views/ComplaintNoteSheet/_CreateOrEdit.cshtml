@model BEPZA_MEDICAL.Web.Areas.PRM.ViewModel.ComplaintNoteSheetViewModel

@{
    Layout = null;
}

<div class="GroupBox">

    <div class="row">
        <span class="label">
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.ComplaintEmployeeId)
            @Html.HiddenFor(model => model.ComplainantEmployeeId)
            @Html.LabelFor(model => model.DeptProceedingNo)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.DeptProceedingNo)
        </span>
    </div>
</div>

<fieldset>
    <legend>Complaint Information</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.RefNo)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.RefNo)
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ComplaintDate)
        </span>
        <span class="field">
            @Html.EditorFor(model => model.ComplaintDate)
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintEmpId)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintEmpId, new { @class = "read-only", @style = "width:150px", @readonly = true })
            <img src='@Url.Content("~/Content/Images/btn_search.gif")' id="imgEmpSearch" alt="Search" onclick="return openComplaintEmployee();" />
        </span>

    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintEmployeeName)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintEmployeeName, new { @class = "read-only", @readonly = true })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDesignationName, new { @class = "read-only", @readonly = true })
        </span>

        <span class="label-right">
            @Html.LabelFor(model => model.ComplaintDepartmentName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplaintDepartmentName, new { @class = "read-only", @readonly = true })

        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplaintDetails)
            <label class="required-field">*</label>
        </span>
        <span class="field" style="width:70%">
            @Html.TextAreaFor(model => model.ComplaintDetails, new { Style = "width:95%", @rows = 10, @maxlength = "500" })
        </span>

    </div>
    <div class="clear">
    </div>
</fieldset>
<div class="clear">
</div>

<fieldset>
    <legend>Complainant Information</legend>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplainantEmpId)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantEmpId, new { @class = "read-only", @style = "width:150px", @readonly = true })
            <img src='@Url.Content("~/Content/Images/btn_search.gif")' id="imgEmpSearch" alt="Search" onclick="return openComplainantEmployee();" />
        </span>

    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplainantEmployeeName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantEmployeeName, new { @class = "read-only", @readonly = true })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.ComplainantDesignationName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantDesignationName, new { @class = "read-only", @readonly = true })
        </span>

        <span class="label-right">
            @Html.LabelFor(model => model.ComplainantDepartmentName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ComplainantDepartmentName, new { @class = "read-only", @readonly = true })
        </span>
    </div>
</fieldset>

<div class="clear"></div>
<script type="text/javascript">

    $(function () {
        var Url = window.location.href;
        $("#btnClear").live("click", function (event) {
            event.preventDefault();
            window.location.href = Url;
        });
    });

    $(document).ready(function () {
        showErrMsg();
        var val = $('input[name=IsIndividual]:checked').val();
        var chk = $('.chkRestriction')
    });

    function showErrMsg() {      
        if ('@Model.errClass' == "success" && '@Model.IsError' == "0") {           
            $('input[name="btnSave"]').hide();
        }
    }

    $("#ComplaintDate").live('change', function () {
        $("#message").empty();
        var cDate = new Date();
        var giveDate = new Date($('#ComplaintDate').val());

        if (cDate < giveDate) {
            // Do something
            $("#message").html("<div class=\"validation-summary-errors\" data-valmsg-summary=\"true\"> <span> Complaint Date can not be greater than current date. </span>  </div> ");
            $('#ComplaintDate').val('');
            return;
        }

    })
</script>


@*Accused Person Info*@

<div id="divEmpList">
    <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white;
        padding-right: 0px;">
        <p>
            Your browser does not support iframes.
        </p>
    </iframe>
</div>
<br />
<div class="clear">
</div>


<script type="text/javascript">

    $(document).ready(function () {

        $("#divEmpList").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Employee', beforeclose: function (event, ui) { Closing(); } });
       
    });
    //Accused Person
    function openComplaintEmployee() {
        var url = '@Url.Action("EmployeeSearchTwo", "Employee")?UseTypeEmpId=1';
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            timeout: 5000,
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');
        return false;
    }
    //Complainant Person
    function openComplainantEmployee() {
        var url = '@Url.Action("EmployeeSearchTwo", "Employee")?UseTypeEmpId=2';
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            timeout: 5000,
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');
        return false;
    }


    function setEmpData(id, useTypeEmpId) {
        //Accused Person
        if (useTypeEmpId == 1) {
            $('#ComplaintEmployeeId').val(id);
            GetComplaintEmployeeInfo(id);
            $("#divEmpList").dialog('close');
        }
        //Complainant Person
        if (useTypeEmpId == 2) {
            $('#ComplainantEmployeeId').val(id);
            GetComplainantEmployeeInfo(id);
            $("#divEmpList").dialog('close');
        }

    }
    //Accused Person
    function GetComplaintEmployeeInfo(empId) {
        var cEmployeeId = $('#ComplainantEmployeeId').val();
        if (cEmployeeId == empId) {
            $("#message").html("<div class=\"validation-summary-errors\" data-valmsg-summary=\"true\"> <span> Accused Person would not be same to Complainant </span>  </div> ");
            return;
        }
        var url = '@Url.Action("GetEmployeeInfo", "ComplaintNoteSheet")';
        if (empId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ empId: empId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $("#ComplaintEmpId").val(obj.EmpId);
                    $('#ComplaintEmployeeName').val(obj.EmployeeName);
                    $("#ComplaintDesignationName").val(obj.DesignationName);
                    $("#ComplaintDepartmentName").val(obj.DepartmentName);
                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }
    //Complainant Person
    function GetComplainantEmployeeInfo(empId) {       
        var aEmployeeId = $('#ComplaintEmployeeId').val();
        if (aEmployeeId == empId) {
            $("#message").html("<div class=\"validation-summary-errors\" data-valmsg-summary=\"true\"> <span> Complainant  would not be same to Accused Person</span>  </div> ");
             return;
        }
        var url = '@Url.Action("GetEmployeeInfo", "ComplaintNoteSheet")';
        if (empId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ empId: empId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $("#ComplainantEmpId").val(obj.EmpId);
                    $('#ComplainantEmployeeName').val(obj.EmployeeName);
                    $("#ComplainantDesignationName").val(obj.DesignationName);
                    $("#ComplainantDepartmentName").val(obj.DepartmentName);
                },
                failure: function (response) {
                    //alert(response.d);
                }
            });
        }
    }




    function Closing() {

    }

</script>
@*End Accused Person Info*@


