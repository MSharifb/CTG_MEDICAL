@model BEPZA_MEDICAL.Web.Areas.PRM.ViewModel.OrganogramLevelViewModel
@{    
    Layout = null;
}
<div style="background: #FFFFFF" class="demo jstree jstree-5" id="treeView">
</div>
<script type="text/javascript">
    $(function () {
        $("#search").click(function () {
            $("#treeView").jstree("search", document.getElementById("LevelName").value);
        })
    });
    $(function () {
        $("#treeView") 
        //bind the tree with data
        .jstree({
            // List of active plugins
            "plugins": [
                "themes", "json_data", "ui", "crrm", "cookies", "dnd", "search", "types", "hotkeys", "contextmenu"
            ],

            // I usually configure the plugin that handles the data first
            // This example uses JSON as it is most common
            "json_data": {
                // This tree is ajax enabled - as this is most common, and maybe a bit more complex
                // All the options are almost the same as jQuery's AJAX (read the docs)
                "ajax": {
                    // the URL to fetch the data
                    "url": "@Url.Action("GetTreeData", "OrganogramLevel")",
                    // the `data` function is executed in the instance's scope
                    // the parameter is the node being loaded
                    // (may be -1, 0, or undefined when loading the root nodes)
                    "data": function (n) {
                        // the result is fed to the AJAX request `data` option
                        return {
                            "operation": "get_children",
                            "id": n.attr ? n.attr("id").replace("node_", "") : 1
                        };
                    }
                }
            },
            // Configuring the search plugin
            "search": {
                // As this has been a common question - async search
                // Same as above - the `ajax` config option is actually jQuery's AJAX object
                "ajax": {
                    "url": "@Url.Action("GetTreeData", "OrganogramLevel")",
                    // You get the search string as a parameter
                    "data": function (str) {

                        //alert(str);
                        return {
                            "operation": "search",
                            "search_str": str
                        };
                    }
                }
            },
            // Using types - most of the time this is an overkill
            // read the docs carefully to decide whether you need types
            "types": {
                // I set both options to -2, as I do not need depth and children count checking
                // Those two checks may slow jstree a lot, so use only when needed
                "max_depth": -2,
                "max_children": -2,
                // I want only `drive` nodes to be root nodes
                // This will prevent moving or creating any other type as a root node
                "valid_children": ["drive"],
                "types": {
                    // The default type
                    "default": {
                        // I want this type to have no children (so only leaf nodes)
                        // In my case - those are files
                        "valid_children": "none",
                        // If we specify an icon for the default type it WILL OVERRIDE the theme icons
                        "icon": {
                            //"image": "file.png"
                        }
                    },
                    // The `folder` type
                    "folder": {
                        // can have files and other folders inside of it, but NOT `drive` nodes
                        "valid_children": ["default", "folder"],
                        "icon": {
                            //	                    "image": "/static/v.1.0pre/_demo/folder.png"
                            "image": "d.png"
                        }
                    },
                    // The `drive` nodes
                    "drive": {
                        // can have files and folders inside, but NOT other `drive` nodes
                        "valid_children": ["default", "folder"],
                        "icon": {
                            //	                    "image": "/static/v.1.0pre/_demo/root.png"
                            "image": "file.png"
                        },
                        // those prevent the functions with the same name to be used on `drive` nodes
                        // internally the `before` event is used
                        "start_drag": false,
                        "move_node": false,
                        "delete_node": false,
                        "remove": false
                    }
                }
            },
            // UI & core - the nodes to initially select and open will be overwritten by the cookie plugin

            // the UI plugin - it handles selecting/deselecting/hovering nodes
            "ui": {
                // this makes the node with ID node_4 selected onload
                "initially_select": ["node_4"]
            },
            // the core plugin - not many options here
            "core": {
                // just open those two nodes up
                // as this is an AJAX enabled tree, both will be downloaded from the server
                "initially_open": ["node_2", "node_3"]
            },

            "contextmenu": {
                "items": function ($node) {
                    return {
                        "Create": {
                            "label": "Create",
                            "action": CreateNode/*function (obj) { this.create(obj);  }*/
                        },
                        "Edit": {
                            "label": "Edit",
                            "action": EditNode//function (obj) { this.rename(obj);}
                        },
                        "Delete": {
                            "label": "Delete",
                            "action": DeleteNode//function (obj) { this.remove(obj); }
                        }
                    };
                }

            }
        })


        function CreateNode(obj) {
            var nodeId = $(obj).attr('id');          
            //document.location = "@Url.Action("Create")" + "/" + nodeId;

            $.get(
                "@Url.Action("Create", "OrganogramLevel")" + "/" + nodeId,
                {},
                function (r) {
                    if (r != '') {
                        if (r.length < 100) {
                            $('.search-content').show();
                            $("#message").show();
                            $('#message').text(r).css({ 'color': 'red' });
                            $("#message").delay(3000).hide('slow');
                        }
                        else {
                            $('.search-content').hide();
                            $('.frm-content').empty();
                            $('.frm-content').append(r);
                        }
                    }
                    else {
                        $('.search-content').show();
                        $(".demo").jstree("refresh");
                    }
                }
            );
        }

        function EditNode(obj) {
            //document.location = "@Url.Action("Edit")" + "/" + $(obj).attr('id');

            var nodeId = $(obj).attr('id');
            $.get(             
                 "@Url.Action("Edit", "OrganogramLevel")" + "/" + nodeId,
                {},
                function (r) {
                    if (r != '') {
                        if (r.length < 100) {
                            $('.search-content').show();
                            $("#message").show();
                            $('#message').text(r).css({ 'color': 'red' });
                            $("#message").delay(3000).hide('slow');
                        }
                        else {
                            $('.search-content').hide();
                            $('.frm-content').empty();
                            $('.frm-content').append(r);
                        }
                    }
                    else {
                        $('.search-content').show();
                        $(".demo").jstree("refresh");
                    }
                }
            );
        }

        function DeleteNode(obj) {
            $('.search-content').show();
            this.remove(obj);
            //document.location = "@Url.Action("Delete")" + "/" + $(obj).attr('id');
            $.get(
                "@Url.Action("Delete","OrganogramLevel")" + "/" + $(obj).attr('id'),
                {},
                function (r) {
                    if (r.toLowerCase().indexOf("error") >= 0) {
                        $("#message").show();
                        $('#message').text(r).css({ 'color': 'red' });
                        $("#message").delay(3000).hide('slow');
                    }
                    else {
                        $("#message").show();
                        $('#message').text(r).css({ 'color': 'green' });
                        $("#message").delay(3000).hide('slow');
                    }
                    $(".demo").jstree("refresh");
                }
            );
        }

    });

</script>
