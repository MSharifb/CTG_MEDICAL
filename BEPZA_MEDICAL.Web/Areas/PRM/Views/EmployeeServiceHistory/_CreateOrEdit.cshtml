@model BEPZA_MEDICAL.Web.Areas.PRM.ViewModel.Employee.EmployeeServiceHistoryViewModel
@using BEPZA_MEDICAL.Web.Helpers

<div class="message">
    @if (!string.IsNullOrEmpty(Model.ErrMsg))
    {
        if (@Model.IsError == 1)
        {
            <div class="failed">
                @Model.ErrMsg
            </div>
        }
        else
        {
            <div class="success">
                @Model.ErrMsg
            </div>
        }
    }
    @Html.ValidationSummary(false, BEPZA_MEDICAL.Web.Utility.Common.ValidationSummaryHead)
</div>

<div class="GroupBox">
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.Type, new { @class = "label-required" })
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.Type, Model.TypeList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>
    <div>
        @*from hiddn field*@
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.EmployeeId)
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.EmpId, new { @class = "label-required" })
        </span>
        <span class="field">

            @Html.TextBoxFor(model => model.EmpId, new { @class = "read-only", @style = "width:150px", @readonly = true })
            <img src='@Url.Content("~/Content/Images/btn_search.gif")' id="imgEmpSearch" alt="Search" onclick="return openEmployee();" />
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.Designation)
        </span><span class="field">
            @Html.TextBoxFor(model => model.Designation, new { @class = "read-only", @readonly = true })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.EmployeeName)
        </span><span class="field">
            @Html.TextBoxFor(model => model.EmployeeName, new { @class = "read-only", @readonly = true })
        </span>

        <span class="label-right">
            @Html.LabelFor(model => model.OrderDate, new { @class = "label-required" })
        </span>
        <span class="field">
            @Html.EditorFor(model => model.OrderDate)
        </span>

    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.OrderNo)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.OrderNo)
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.EffectiveDate)
        </span>
        <span class="field">
            @Html.EditorFor(model => model.EffectiveDate)
        </span>
    </div>
    <div class="clear">
    </div>
</div>


<div class="GroupBox">
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromDivisionId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromDivisionId, Model.FromDivisionList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToDivisionId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToDivisionId, Model.ToDivisionList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromDisciplineId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromDisciplineId, Model.FromDisciplineList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToDisciplineId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToDisciplineId, Model.ToDisciplineList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromEmploymentProcessId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromEmploymentProcessName,Model.FromEmploymentProcessList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToEmploymentProcessId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToEmploymentProcessId, Model.ToEmploymentProcessList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromEmploymentTypeId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromEmploymentType, Model.FromEmploymentTypeList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToEmploymentTypeId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToEmploymentTypeId, Model.ToEmploymentTypeList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single required not-increment" })
        </span>
    </div>
    <div class="row" id="divToZone">
        <span class="label">
            @Html.LabelFor(model => model.FromZoneInfoId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromZoneInfoId, Model.FromZoneInfoList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single required not-increment" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToZoneInfoId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToZoneInfoId, Model.ToZoneInfoList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromSalaryScaleId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromSalaryScaleId, Model.FromSalaryScaleList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
        <span class="label-right">

            @Html.LabelFor(model => model.ToSalaryScaleId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToSalaryScaleId, Model.ToSalaryScaleList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromDesignationId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromDesignationId, Model.FromDesignationList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToDesignationId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToDesignationId, Model.ToDesignationList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromGradeId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromGradeId, Model.FromGradeList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToGradeId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToGradeId,Model.ToGradeList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromStepId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.FromStepId,Model.FromStepList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToStepId)
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToStepId, Model.ToStepList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "select-single" })
        </span>
    </div>
    <div class="clear">
    </div>
</div>

<div id="divEmpList" style="display:none">
    <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white;
        padding-right: 0px;">
        <p>
            Your browser does not support iframes.
        </p>
    </iframe>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        showErrMsg();
    });

    function showErrMsg() {
        if ('@Model.errClass' == "success" && '@Model.IsError' == "0") {
            $('#btnSave').hide();
        }
    }
    $(function () {
        var Url = window.location.href;
        $("#btnClear").live("click", function (event) {
            event.preventDefault();
            window.location.href = Url;
        });
    });

    $('#btnClear').live('click', function () {
        document.getElementById('frm').reset();
        $('#btnAdd').show();
    })

</script>

<script type="text/javascript">
    // ******** functions for open popup *************
    $(document).ready(function () {
        $("#divEmpList").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Employee', beforeclose: function (event, ui) { Closing(); } });
        showErrMsg();
        //DisableEmpSearch();
        //disableUpload();
    });
    //Employee Info
    function openEmployee() {
        $('#message').empty();
        $('#Type').val('');
        var url = '@Url.Action("EmployeeSearch", "Employee")?UseTypeEmpId=1';
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            timeout: 5000,
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');
        return false;
    }
    function setEmpData(id, useTypeEmpId) {
        $('#EmployeeId').val(id);
        GetEmployeeInfo(id);
        $("#divEmpList").dialog('close');
    }
    //Employee Info
    function GetEmployeeInfo(empId) {
        var url = '@Url.Action("GetEmployeeInfoTemp", "EmployeeSeperation")';
        if (empId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ empId: empId }),
                contentType: "application/json; charset=utf-8",
                success: function (obj) {
                    $("#EmpId").val(obj.EmpId);
                    $('#EmployeeName').val(obj.EmployeeName);
                    $("#Designation").val(obj.Designation);
                },
                failure: function (response) {
                    alert('Something Wrong!');
                }
            });
        }
    }
    function Closing() {

    }

</script>