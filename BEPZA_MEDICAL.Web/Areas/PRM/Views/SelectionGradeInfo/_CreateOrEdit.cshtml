@model BEPZA_MEDICAL.Web.Areas.PRM.ViewModel.EmployeeConfirmationIncrementPromotionViewModel
@using BEPZA_MEDICAL.Web.Helpers

<script src="@Url.Content("~/Scripts/listEditor.js")" type="text/javascript"></script>

<div class="message">
    @if (!string.IsNullOrEmpty(Model.ErrMsg))
    {
        if (@Model.IsError == 1)
        {
            <div class="failed">
                @Model.ErrMsg
            </div>
        }
        else
        {
            <div class="success">
                @Model.ErrMsg
            </div>
        }
    }
    @Html.ValidationSummary(false, BEPZA_MEDICAL.Web.Utility.Common.ValidationSummaryHead)
</div>
<div class="GroupBox">
    <div class="row emp">
        <span class="label">
            @Html.HiddenFor(model => model.Type)           
            @Html.LabelFor(model => model.EmpId)
            <label class="required-field">*</label>
        </span><span class="field">
            @Html.TextBoxFor(model => model.EmpId, new { @class = "read-only", @style = "width:150px", @readonly = true })
            <img src='@Url.Content("~/Content/Images/btn_search.gif")' id="imgEmpSearch" onclick="return openEmployee();" />
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.OrderNo)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.OrderNo)
        </span>
    </div>
    <div>
        @*from hiddn field*@
        @Html.HiddenFor(model => model.EmployeeId)
        @Html.HiddenFor(model => model.FromDisciplineId)
        @Html.HiddenFor(model => model.FromDivisionId)       
        @Html.HiddenFor(model => model.FromEmploymentTypeId)
        @Html.HiddenFor(model => model.FromEmploymentProcessId)     
        @Html.HiddenFor(model => model.FromOrganogramLevelId)
        @Html.HiddenFor(model => model.FromDesignationId)
        @Html.HiddenFor(model => model.FromSalaryScaleId)
        @Html.HiddenFor(model => model.FromGradeId)
        @Html.HiddenFor(model => model.FromStepId)
        @Html.HiddenFor(model => model.FromZoneInfoId)
        @Html.HiddenFor(model => model.FromRegionId)

        @*to hiddn field*@
        @Html.HiddenFor(model => model.ToDisciplineId)
        @Html.HiddenFor(model => model.ToDivisionId)       
        @Html.HiddenFor(model => model.ToEmploymentTypeId)
        @Html.HiddenFor(model => model.ToEmploymentProcessId)   
        @Html.HiddenFor(model => model.ToDesignationId)     
        @Html.HiddenFor(model => model.ToOrganogramLevelId)
        @Html.HiddenFor(model => model.ToSalaryScaleId)
        @*@Html.HiddenFor(model => model.ToGradeId)*@
        @Html.HiddenFor(model => model.InitialBasic)
        @Html.HiddenFor(model => model.YearlyIncrement)
        @Html.HiddenFor(model => model.ToZoneInfoId)
        @Html.HiddenFor(model => model.ToRegionId)
        @Html.HiddenFor(model => model.DateofConfirmation)
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.EmployeeName)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.EmployeeName, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.OrderDate)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.EditorFor(model => model.OrderDate)
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromDivisionId)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.FromDivisionName, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.EffectiveDate)
            <label class="required-field">*</label>
        </span>
        <span class="field">
            @Html.EditorFor(model => model.EffectiveDate)
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.JoiningDate)
        </span>
        <span class="field">
            @Html.EditorFor(model => model.JoiningDate, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.Remarks)
        </span>
        <span class="label">
            @Html.TextAreaFor(model => model.Remarks, new { @style = "width:250px" })
        </span>
    </div>

    <div class="clear">
    </div>
</div>

<div class="GroupBox">
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromSalaryScaleId)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.FromSalaryScale, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToSalaryScaleId, new { @class = "label-required" })

        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.ToSalaryScale, new { @class = "read-only required", @readonly = true })
        </span>

    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromGradeId)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.FromGrade, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToGradeId, new { @class = "label-required" })
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToGradeId, Model.GradeList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "required" })
        </span>
    </div>

    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromStepId)
        </span>
        <span class="field">
            @Html.TextBoxFor(model => model.FromStep, new { @class = "read-only", @readonly = true })
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToStepId, new { @class = "label-required" })
        </span>
        <span class="field">
            @Html.DropDownListFor(model => model.ToStepId, Model.StepList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "required" })

        </span>
    </div>


    <div class="row">
        <div class="row">
            <span class="label">
                @Html.CheckBoxFor(model => model.IsAddAttachment, new { onclick = "disableUpload();" })
                @Html.LabelFor(model => model.IsAddAttachment)
            </span>
            <span class="field">
                <div id="divFileAttach">
                    @Html.HiddenFor(model => model.Attachment)
                    @Html.HiddenFor(model => model.FileName)
                    <input type="file" name="Attachment" id="Attachment" />
                    <a href="@Model.FilePath" visible="true" runat="server" target="_blank">@Model.FileName</a>
                </div>
            </span>
        </div>
    </div>
</div>
<div class="GroupBox" style="display:none">
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromBasicSalary)
        </span>
        <span class="field">
            @Html.EditorFor(model => model.FromBasicSalary)
        </span>
        <span class="label-right">
            @Html.LabelFor(model => model.ToBasicSalary, new { @class = "label-required" })
        </span>
        <span class="label">
            @Html.EditorFor(model => model.ToBasicSalary)
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.FromGrossSalary)
        </span><span class="field">
            @Html.EditorFor(model => model.FromGrossSalary)
        </span><span class="label-right">
            @Html.LabelFor(model => model.ToGrossSalary, new { @class = "label-required" })
        </span><span class="label">
            @Html.EditorFor(model => model.ToGrossSalary)
        </span>
    </div>
    <div class="row">
        <span class="label">
            @Html.LabelFor(model => model.IncrementAmount)
        </span>
        <span class="field">
            @Html.EditorFor(model => model.IncrementAmount)

        </span>
    </div>

    <div class="clear">
    </div>
</div>

<div id="divEmpList">
    <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white;
        padding-right: 0px;">
        <p>
            Your browser does not support iframes.
        </p>
    </iframe>
</div>


<script type="text/javascript">

    // ******** functions for open popup *************
    $(document).ready(function () {
        $("#divEmpList").dialog({ autoOpen: false, modal: true, height: 600, width: 900, title: 'Employee', beforeclose: function (event, ui) { Closing(); } });

        DisableEmpSearch();
    });

    function DisableEmpSearch() {
        if ($('#Id').val() > 0)
            $('#imgEmpSearch').hide();
        else
            $('#imgEmpSearch').show();
    }

    function openEmployee() {
        var url = '@Url.Action("EmployeeSearch", "SelectionGradeInfo")' + '?Type=' + $('#Type').val();
        //var url = '@Url.Action("EmployeeSearch", "Employee")?searchEmpType=active';
        $.ajax({
            url: url,
            type: 'GET',
            dataType: 'text',
            timeout: 5000,
            error: function () {
                alert('System is unable to load data please try again.');
            },
            success: function (result) {
                $('#divEmpList').html(result);
            }
        });

        $("#divEmpList").dialog('open');
        //disableToGrade();
        return false;
    }

    function setData(id) {
        $('#EmployeeId').val(id)
        GetEmployeeInfo();
        $("#divEmpList").dialog('close');
    }

    function incrementAmount() {
        var amt = $('#ToGrossSalary').val() - $('#FromGrossSalary').val();
        if (amt > 0)
            $('#IncrementAmount').val(amt.toFixed(2));
        else
            $('#IncrementAmount').val(0);
    }

    function Closing() {

    }

    //--------------------------------------
    function GetEmployeeInfo() {
        var empId = $('#EmployeeId').val();
        var url = '@Url.Action("GetEmployeeInfo", "EmployeeConfirmationIncrementPromotion")';
        var form = $('#frm');
        var serializedForm = form.serialize();

        $('#EmpId').val('');
        $('#EmployeeName').val('');
        $('#JoiningDate').val('');
        $('#FromDisciplineId').val('');
        $('#ToDisciplineId').val('');
        $('#FromDivisionId').val('');
        $('#FromDivisionName').val('');
        $('#ToDivisionId').val('');
        $('#FromDesignation').val('');
        $('#FromDesignationId').val('');
        $('#FromEmploymentTypeId').val('');
        $('#FromEmploymentType').val('');

        $('#FromEmploymentProcessId').val('');
        $('#FromEmploymentProcessName').val('');

        $('#FromSalaryScaleId').val('');
        $('#FromSalaryScale').val('');
        $('#FromOrganogramLevelId').val('');
        $('#FromOrganogramLevelName').val('');

        $('#FromGradeId').val('');
        $('#FromGrade').val('');
        $('#FromStep').val('');
        $('#FromStepId').val('');
        $('#FromBasicSalary').val('');
        $('#FromGrossSalary').val('');

        $('#InitialBasic').val('');
        $('#YearlyIncrement').val('');
        $('#DateofConfirmation').val('');

        $('#ToDivisionId').val('');
        $('#ToOrganogramLevelId').val('');
        $('#ToOrganogramLevelName').val('');

        $('#ToDesignationId').val('');
        $('#ToDesignation').val('');

        $('#ToSalaryScaleId').val('');
        $('#ToSalaryScale').val('');

        //$('#ToGradeId').val('');
        //$('#ToGrade').val('');

        $('input#ToStepId').val('');
        $('select#ToStepId').val('');

        $('#FromZoneInfoId').val('');
        $('#ToZoneInfoId').val('');
        if (empId > 0) {
            $.post(url, serializedForm, function (obj) {

                if (obj.Result == 'NoSalaryStructure') {
                    alert('The employee has no salary structure.');
                }
                else if (obj.Result == false) {
                    alert('System is unable to load data please try again.');
                }
                else {

                    $("#EmpId").val(obj.EmpId);                  
                    $('#EmployeeName').val(obj.EmployeeName);
                    $('#JoiningDate').val(obj.JoiningDate);

                    $('#FromDisciplineId').val(obj.FromDisciplineId);
                    $('#ToDisciplineId').val(obj.FromDisciplineId);

                    $('#FromDivisionName').val(obj.FromDivisionName);
                    $('#FromDivisionId').val(obj.FromDivisionId);
                    $('#ToDivisionId').val(obj.FromDivisionId);
                                     
                    $('#FromEmploymentProcessId').val(obj.FromEmploymentProcessId);
                    $('#ToEmploymentProcessId').val(obj.FromEmploymentProcessId);

                    $('#FromEmploymentTypeId').val(obj.FromEmploymentTypeId);
                    $('#FromEmploymentType').val(obj.FromEmploymentType);
                    $('#ToEmploymentTypeId').val(obj.FromEmploymentTypeId);
                    $('#ToEmploymentType').val(obj.FromEmploymentType);                   

                    $('#FromOrganogramLevelId').val(obj.FromOrganogramLevelId);
                    $('#FromOrganogramLevelName').val(obj.FromOrganogramLevelName);
                    $('#ToOrganogramLevelId').val(obj.FromOrganogramLevelId);
                    $('#ToOrganogramLevelName').val(obj.FromOrganogramLevelName);                  

                    $('#FromDesignationId').val(obj.FromDesignationId);
                    $('#FromDesignation').val(obj.FromDesignation);

                    $('#ToDesignationId').val(obj.FromDesignationId);
                    $('#ToDesignation').val(obj.FromDesignation);

                    $('#FromSalaryScaleId').val(obj.FromSalaryScaleId);
                    $('#FromSalaryScale').val(obj.FromSalaryScale);

                    $('#ToSalaryScaleId').val(obj.FromSalaryScaleId);
                    $('#ToSalaryScale').val(obj.FromSalaryScale);

                    $('#FromGradeId').val(obj.FromGradeId);
                    $('#FromGrade').val(obj.FromGrade);
                    $('#FromStep').val(obj.FromStep);
                    $('#FromStepId').val(obj.FromStepId);
                    $('#FromBasicSalary').val(obj.FromBasicSalary);
                    $('#FromGrossSalary').val(obj.FromGrossSalary);
                    $('#InitialBasic').val(obj.InitialBasic);
                    $('#YearlyIncrement').val(obj.YearlyIncrement);
                    $('#DateofConfirmation').val(obj.DateofConfirmation);
                    $('#FromZoneInfoId').val(obj.FromZoneInfoId);
                    $('#ToZoneInfoId').val(obj.FromZoneInfoId);

                    $('#FromRegionId').val(obj.FromRegionId);
                    $('#ToRegionId').val(obj.FromRegionId);
                }

            }, "json");
        }
        return false;
    }

    // ---------------------------------

    function disableUpload() {
        var IsSelect = $('#IsAddAttachment').attr('checked');
        if (IsSelect) {
            $('#File').show();
            //$('#spAttachment').show();
            $('#divFileAttach').show();
        }
        else {
            $('#File').hide();
            //$('#spAttachment').hide();
            $('#divFileAttach').hide();
        }
    }

    $(function () {
        //cascading dropdown
        $("select#ToGradeId").change(function () {
            // LoadSetps($(this).val());
            loadGradeSetp($(this).val());
        })

    });

    function loadGradeSetp(gradeId) {
        var stepSelect = $('select#ToStepId');
        stepSelect.empty();
        stepSelect.append($('<option/>', {
            value: '',
            text: '@Content.DDLOptionalLabel()'
        }));

        if (gradeId != null && gradeId != '') {
            $.getJSON('@Url.Action("GetStep", "SalaryStructure", new { area = "PGM" })', { gradeId: gradeId }, function (data) {
                $.each(data.steps, function (index, step) {
                    stepSelect.append($('<option/>', {
                        value: step.Id,
                        text: step.StepName
                    }));
                });
            });
        }
        else {
            $("#ToStepId>option").remove();
            $("#ToStepId").html("<option value=\"" + "" + "\">" + "[Select One]" + "</option>");
            $('#ToBasicSalary').val(0);
            $('#ToGrossSalary').val(0);
        }
    }

    $(function () {
        $("select#ToStepId").change(function () {
            $(".message").empty();
            $("#ToBasicSalary").removeClass('border-red');
            $("#ToGrossSalary").removeClass('border-red');
            gradeId = $("#ToGradeId").val();
            stepId = $("#ToStepId").val();
            populateSalaryDetails(gradeId, stepId);
        });
        
        $("#ToGrossSalary").change(function () {
            if ($('#DateofConfirmation').val() == '') {
                calculateBasic();
            }
        });
    });


    function populateSalaryDetails(gradeId, stepId) {
        //console.log('grade: ' + gradeId + ' step: ' + stepId);
        if (gradeId != '' && stepId != '') {
            $.get('@Url.Action("GetBasicGrossByStep", "EmployeeConfirmationIncrementPromotion")' + '?gradeId=' + gradeId + '&stepId=' + stepId, function (data) {

                $('#ToBasicSalary').val(data.Basic);
                $('#ToGrossSalary').val(data.Gross);
                incrementAmount();
            });
        }
    }

    function calculateBasic() {
        //console.log('basic: ' + basic + ' gross: ' + gross);
        var basic = parseFloat($('#InitialBasic').val());
        var gross = parseFloat($('#ToGrossSalary').val());

        if (basic > 0 && gross > 0) {
            var basic = gross * (basic / 100);
            $('#ToBasicSalary').val(basic.toFixed(2));
            incrementAmount();
        }
    }

    $('#btnSave').live('click', function (e) {
        $(".message").empty();
        $("#ToBasicSalary").removeClass('border-red');
        $("#ToGrossSalary").removeClass('border-red');
        var toBasicSalry = $("#ToBasicSalary").val();
        var toGrossSalary = $("#ToGrossSalary").val();
        if (toBasicSalry <= 0) {
            $("#ToBasicSalary").addClass('border-red');
            $(".message").html("<div class=\"validation-summary-errors\" data-valmsg-summary=\"true\"> <span> Basic must be greater than Zero.</span> </div> ");
            e.preventDefault();
        }
        else if (toGrossSalary <= 0) {
            $("#ToGrossSalary").addClass('border-red');
            $(".message").html("<div class=\"validation-summary-errors\" data-valmsg-summary=\"true\"> <span> Gross  must be greater than Zero.</span> </div> ");
            e.preventDefault();
        }

    });
</script>
