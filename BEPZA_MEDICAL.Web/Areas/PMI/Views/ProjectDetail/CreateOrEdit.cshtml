@model BEPZA_MEDICAL.Web.Areas.PMI.ViewModel.Project.ProjectViewModel

@{
    Layout = "~/Areas/PMI/Views/Shared/_LayoutNew.cshtml";
}

<script type="text/javascript">
    $(function () {
        //debugger;
        var Url = window.location.href;
        $("#btnClear").on("click", function (event) {
            event.preventDefault();
            window.location.href = Url;
        });
        var url = window.location.href.split('/');
        var aa = url[url.length - 1];

        if (aa.toLowerCase().indexOf("&") >= 0) {
            //var baseUrl = url[6].split('&');
            var baseUrl = aa.split('&');
            var typeName = baseUrl[1].split('=');
            var messageType = typeName[1];
            if (messageType == "success") {
                $('.message').html("Information has been updated successfully");
                $('.message').css({ "color": "green", "font-weight": "bold" });
            }
        }
    });

    $(function () {
        if ('@Model.ActionType' == 'Update') {
            $('#btnSave').hide();
            $('#btnUpdate').show();

        }
        else {
            $('#btnUpdate').hide();
        }
        var approvalStatus = $("#ApprovalStatusId option:selected").text();

        if ('@Model.Id' != 0 && approvalStatus == 'Draft') {
            $('.ApvUpdate').hide();
        }
        else if ('@Model.Id' != 0  && approvalStatus != 'Draft') {
            $('.ApvSave').hide();
        }
        else if ('@Model.Id' == 0 ){
            $('.ApvUpdate').hide();
        }

        var projectId = '@Model.Id';
        var selectedProjectId = parseInt(projectId);
        if (isNaN(selectedProjectId)) {
            selectedProjectId = 0;
        }

        if (selectedProjectId != 0) {
            $('#btnPrint').show();
        }
        else {
            $('#btnPrint').hide();
        }
    });

</script>

<style>
    .textArea {
        width: 77% !important;
    }

    .tender-summary {
        text-align: left !important;
        font-weight: bold;
        font-size: 11px;
    }

    .panel-heading {
        padding: 0;
    }
</style>





<div>
    @using (Html.BeginForm(Model.ActionType, "ProjectDetail", FormMethod.Post, new { id = "frm", enctype = "multipart/form-data" }))
    {
        <div class="message">
            @if (!string.IsNullOrEmpty(Model.ErrMsg))
            {
                if (@Model.errClass == "success")
                {
                    <div class="failed">
                        @Model.ErrMsg
                    </div>
                }
                else
                {
                    <div class="success">
                        @Model.ErrMsg
                    </div>
                }
            }

            @Html.ValidationSummary(false, BEPZA_MEDICAL.Web.Utility.Common.ValidationSummaryHead)
        </div>

        <div id="dvPrintProject">
            <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white; padding-right: 0px;">
                <p>
                    Your browser does not support iframes.
                </p>
            </iframe>
        </div>
        <div class="form-horizontal">
            <div class="row" style="text-align:right; margin-bottom:0;">
                <button type="button" id="btnPrint" class="btn btn-sm btn-primary">
                    <i class="fa fa-print fa-lg"></i>Print
                </button>
            </div>
            <fieldset>
                <legend>General Information</legend>
                <div class="form-group">
                    @Html.HiddenFor(m => m.Id)
                    @Html.HiddenFor(m => m.APPDetailsId)
                    @Html.HiddenFor(m => m.APPMasterId)
                    @Html.LabelFor(m => m.MinistryId, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.MinistryName)
                        @Html.HiddenFor(m => m.MinistryId)
                        @Html.HiddenFor(m => m.ConstructionTypeId)
                        @*@Html.DropDownListFor(m => m.MinistryId, Model.MinistryList, @String.Format("{0}", Content.DDLOptionalLabel()))*@
                    </div>
                    @Html.LabelFor(m => m.AgencyId, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">@Html.DropDownListFor(m => m.AgencyId, Model.AgencyList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = @"form-control" })</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.NameOfWorks, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.NameOfWorks, new { @readonly = "readonly" })</div>
                    @Html.LabelFor(m => m.BudgetApprovalDate, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.BudgetApprovalDate)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DevelopmentPartner, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.DevelopmentPartner)</div>
                    @Html.LabelFor(m => m.ProjectCode, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.ProjectCode)</div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.ProjectZones, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-10">@Html.TextAreaFor(m => m.ProjectZones, new { @style = @"background:#F2F5F8; border:1px solid #CCCCCC; cursor:default;", @readonly = true })</div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.ProcuringEntryName, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.ProcuringEntryName)</div>
                    @Html.LabelFor(m => m.ProcuringEntryCode, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.ProcuringEntryCode)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ConstructionTypeName, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.ConstructionTypeName)</div>
                    @Html.LabelFor(m => m.ConstructionCategoryId, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.DropDownListFor(m => m.ConstructionCategoryId, Model.ConstructionCategoryList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = @"form-control" })</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ContractorName, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.ContractorName)</div>
                    @Html.LabelFor(m => m.DateOfIssuingNOA, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.DateOfIssuingNOA)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DateOfPGSubmission, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.DateOfPGSubmission)</div>
                    @Html.LabelFor(m => m.DateOfPGExpire, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.DateOfPGExpire)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.InvitationRefNo, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.InvitationRefNo)</div>
                    @Html.LabelFor(m => m.AdministrativeApprovalDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.AdministrativeApprovalDate)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TenderEvalDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.TenderEvalDate)</div>
                    @Html.LabelFor(m => m.TenderIssueDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.TenderIssueDate)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TenderPubDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.TenderPubDate)</div>
                    @Html.LabelFor(m => m.TenderLastSellingDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.TenderLastSellingDate)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TenderOpeningDate, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">@Html.EditorFor(m => m.TenderOpeningDate)</div>
                    @Html.LabelFor(m => m.TenderOpeningTime, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">@Html.TextBoxFor(model => model.TenderOpeningTime, new { @class = "time-picker required" })</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.TenderClosingDate, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.TenderClosingDate)
                    </div>
                    @Html.LabelFor(m => m.TenderClosingTime, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.TenderClosingTime, new { @class = "time-picker required" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ContractSignDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.ContractSignDate)
                    </div>
                    @Html.LabelFor(m => m.SiteHandoverDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.SiteHandoverDate)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.AwardIssueDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.AwardIssueDate)
                    </div>
                    @Html.LabelFor(m => m.CreatedDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.CreatedDate)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.DateOfCommencement, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.DateOfCommencement)
                    </div>
                    @Html.LabelFor(m => m.TimeExtensionInDays, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(m => m.TimeExtensionInDays)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.CompletionDate, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.CompletionDate)
                    </div>

                    @Html.LabelFor(m => m.PhysicalProgress, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(m => m.PhysicalProgress, "{0:N2}")<span style="margin-left:5px;">%</span>
                    </div>
                </div>
                <div class="form-group">

                    @Html.LabelFor(m => m.ProjectStatusId, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(m => m.ProjectStatusId, Model.ProjectStatusList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = @"form-control" })
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend>
                    Time Extension / Completion Date
                </legend>
                <div style="text-align:right;">

                </div>
                <div id="dvTimeExtension">
                    <table id="grid" class="table table-bordered" style="width:100%;" align="center">
                        <thead>
                            <tr>
                                <th colspan="4" style="text-align: right; background: #FFFFFF !important; ">
                                    <button type="button" id="btnAddTimeExtension" class="btn btn-sm btn-primary">
                                        <i class="fa fa-plus-circle"></i>Add New
                                    </button>
                                </th>
                            </tr>
                            <tr>
                                <th class="day-field">No of Days Extended</th>
                                <th class="ex-date-field">Expected Completion Date</th>
                                <th class="date-field">Actual Completion Date</th>
                                <th class="control-field">&nbsp;</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (@Model.ProjectTimeExtensionList.Count() > 0)
                            {
                                foreach (var item in Model.ProjectTimeExtensionList)
                                {
                                    @Html.Partial("_ProjectTimeExtension", item);
                                }
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td>Total Extension (Days)</td>
                                <td colspan="3" class="total-time-extension"><input type="text" readonly="readonly" style="background: #F2F5F8;" /></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </fieldset>

            <fieldset>
                <legend>
                    Project Details
                </legend>
                <div style="text-align:right;">
                    <button type="button" id="btnAddProjectDetails" class="btn btn-sm btn-primary">
                        <i class="fa fa-plus-circle fa-lg"></i>Add New
                    </button>
                </div>
                <div id="dvProjectDetails">
                    <table id="grid" class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Procurement Method</th>
                                <th>Source of Fund</th>
                                <th>Approval Authority</th>
                                <th>Package No</th>
                                <th>Package Name</th>
                                <th>Unit</th>
                                <th>Quantity</th>
                                <th>Estimated Cost</th>
                                <th>&nbsp;</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (@Model.ProjectDetailList.Count() > 0)
                            {
                                foreach (var item in Model.ProjectDetailList)
                                {

                                    @Html.Partial("_ProjectDetails", item);
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </fieldset>
            <fieldset>
                <legend>Name and Address of the Office</legend>
                <div class="form-group">
                    @Html.LabelFor(m => m.SellingTenderDescription, new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">@Html.TextAreaFor(m => m.SellingTenderDescription)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ReceivingTenderDescription, new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">@Html.TextAreaFor(m => m.ReceivingTenderDescription)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.OpeningTenderDescription, new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">@Html.TextAreaFor(m => m.OpeningTenderDescription)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.PreTenderMeetingPlace, new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">@Html.TextAreaFor(m => m.PreTenderMeetingPlace)</div>
                </div>
            </fieldset>
            <fieldset>
                <legend>Information For Tender</legend>
                <div class="form-group">
                    @Html.LabelFor(m => m.EligibilityOfTenderer, new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">@Html.TextAreaFor(m => m.EligibilityOfTenderer)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.BriefDescription, new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">@Html.TextAreaFor(m => m.BriefDescription)</div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.BriefDescriptionOfRelated, new { @class = "col-sm-3 control-label" })
                    <div class="col-sm-9">@Html.TextAreaFor(m => m.BriefDescriptionOfRelated)</div>
                </div>
            </fieldset>
            <fieldset>
                <legend>Tender Document Price</legend>
                <div id="dvTenderDetails">
                    <div style="float:left; overflow:hidden;">
                        @Html.Label("Tender Document Price :", new { @class = "tender-summary" }) <label id="lblTotalCost"></label>
                    </div>
                    <div style="text-align:right;">
                        <button type="button" id="btnAddNewTenderDetails" class="btn btn-sm btn-primary">
                            <i class="fa fa-plus-circle fa-lg"></i>Add New
                        </button>
                    </div>
                    <table id="grid" class="table table-bordered">
                        <thead>
                            <tr>
                                <th>@Html.LabelFor(m => m.TenderDetailsViewModel.LotNumber)</th>
                                <th>@Html.LabelFor(m => m.TenderDetailsViewModel.Identification)</th>
                                <th>@Html.LabelFor(m => m.TenderDetailsViewModel.Location)</th>
                                <th>@Html.LabelFor(m => m.TenderDetailsViewModel.SecurityMoney)</th>
                                <th>@Html.LabelFor(m => m.TenderDetailsViewModel.TenderPrice)</th>
                                <th>@Html.LabelFor(m => m.TenderDetailsViewModel.CompletionDays)</th>
                                <th>@Html.LabelFor(m => m.TenderDetailsViewModel.CompletionDate)</th>
                                <th>&nbsp;</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.TenderDetailsViewModelList.Count > 0)
                            {
                                foreach (var item in Model.TenderDetailsViewModelList)
                                {
                                    @Html.Partial("_TenderDetails", item);
                                }
                            }

                        </tbody>
                    </table>

                </div>

            </fieldset>
            <fieldset>
                <legend>Procurement Entity Details</legend>
                <div class="form-group">
                    @Html.LabelFor(m => m.NameOfInvitingTender, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.NameOfInvitingTender)
                    </div>
                    @Html.LabelFor(m => m.DesignationId, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(m => m.DesignationId, Model.DesignationList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = @"form-control" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.ProcureAddress, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextAreaFor(m => m.ProcureAddress)
                    </div>
                    @Html.LabelFor(m => m.PhoneNumber, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.PhoneNumber)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.EmailAddress, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.EmailAddress)
                    </div>
                    @Html.LabelFor(m => m.FaxNumber, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.FaxNumber)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Notice, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextAreaFor(m => m.Notice, new { @class = "TextArea" })
                    </div>
                </div>
            </fieldset>
            <fieldset>
                <legend>Financial Part</legend>
                <div class="form-group">
                    @Html.LabelFor(m => m.SecurityMoneyReefingDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.SecurityMoneyReefingDate)
                    </div>
                    @Html.LabelFor(m => m.LiquidatedDamage, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.LiquidatedDamage)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.PaymentStatusId, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(m => m.PaymentStatusId, Model.PaymentStatusList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = @"form-control" })
                    </div>
                    @Html.LabelFor(m => m.LastPaymentDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.LastPaymentDate)
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.FinalPaymentDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.FinalPaymentDate)
                    </div>
                </div>
            </fieldset>
            <fieldset class="attachment-area">
                <legend>Attachment</legend>
                @if (Model.FileName != null)
                {
                    <div class="row" style="text-align:right;">
                        @Html.ActionLink(Model.FileName.ToString(), "DownloadFile", new { @projectId = Model.Id, @class = @"file-download" })
                    </div>
                }

                <div class="form-group">
                    @Html.LabelFor(m => m.DrawingAttachment, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.HiddenFor(model => model.DrawingAttachment)
                        @Html.HiddenFor(model => model.FileName)
                        @Html.TextBoxFor(model => model.File, new { type = "file" })
                    </div>
                    @Html.LabelFor(m => m.DrawingApprovalDate, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.EditorFor(m => m.DrawingApprovalDate)
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend>Recommendation / Approval Flow</legend>
                <div class="form-group">
                    @Html.LabelFor(m => m.ApprovalStatusId, new { @class = "col-sm-2 control-label labelRequired" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(m => m.ApprovalStatusId, Model.ApprovalStatusList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "form-control", @required = @"required" })
                    </div>
                </div>
                <div class="ApvSave">

                    <table class="table table-bordered" style="width:100%">

                        <thead style="height:10px!important">
                            <tr style="height:10px!important">
                                <th style="width: 30%">Designation</th>
                                <th style="width: 45%">Employee Name & Department</th>
                                <th></th>
                            </tr>
                        </thead>

                        <tbody>
                            @{
                                if (Model.Id == 0)
                                {
                                    if (Model.ApproverList != null && Model.ApproverList.Any())
                                    {
                                        foreach (var x in Model.ApproverList)
                                        {
                                            @Html.Partial("_PartialEmployeeList", x);
                                        }
                                    }
                                }
                                else if (Model.Id != 0 && Model.ApprovalStatus.Contains("Draft"))
                                {
                                    if (Model.ApproverList != null && Model.ApproverList.Any())
                                    {
                                        foreach (var x in Model.ApproverList)
                                        {
                                            @Html.Partial("_PartialEmployeeList", x);
                                        }
                                    }
                                }
                            }

                        </tbody>
                    </table>
                </div>

                <div class="ApvUpdate">
                    <table class="table table-bordered" style="width:100%">
                        <thead>
                            <tr>
                                <th style="width: 30%">Designation</th>
                                <th style="width: 30%">Employee Name</th>
                                <th> Department</th>
                                <th>Status</th>
                                <th> Remarks </th>
                            </tr>
                        </thead>

                        <tbody>
                            @for (int i = 0; i < Model.ApproverList.Count; i++)
                            {
                                var item = Model.ApproverList.ToList()[i];
                                <tr>
                                    <td>@Html.Encode(item.DesignationName)</td>
                                    <td>@Html.Encode(item.EmployeeName)</td>
                                    <td>@Html.Encode(item.DepartmentName)</td>
                                    <td>@Html.Encode(item.Status)</td>
                                    <td>@Html.Encode(item.Remarks)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </fieldset>


            <div class="col-sm-12" style="text-align:right;">
                @if ((new BEPZA_MEDICAL.Web.Utility.AppConstant()).IsAddAssigned)
                {
                    <button class="btn btn-sm btn-primary" type="submit" value="Save" id="btnSave" name="btnSave"><i class="fa fa-save"></i>Save</button>
                    <button class="btn btn-sm btn-primary" type="submit" value="Update" id="btnUpdate" name="btnSave"><i class="fa fa-edit"></i>Update</button>
                }
                <button class="btn btn-sm btn-primary" type="button" value="Clear" id="btnClear" name="btnClear"><i class="fa fa-refresh"></i>Clear</button>
            </div>
        </div>
        <div class="button-crude button-left" style="margin: 5px">
            <a href="@Url.Action("Index")" class="btn btn-primary"> <i class="fa fa-backward"></i> Back</a>
        </div>


    }
</div>

<style type="text/css">
    #tdBudgetSubHead select {
        width: 150px;
    }

    #grid th select {
        width: 100px;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {
        GetTotalPrice();
        $('#file').removeAttr('required');
        $('#DrawingAttachment').removeAttr('required');
        $('#FileName').removeAttr('required');
        CalculateTotalTimeExtension();

    });

    $(document).ready(function () {
        $("#dvPrintProject").dialog({ autoOpen: false, modal: true, height: 420, width: 900, title: 'Print', beforeclose: function (event, ui) { Closing(this); } });
    });

    function Closing(obj) {
        //$(dvFinancialYear).close();
    }
</script>

<script type="text/javascript">
    $("#btnAddNewYear").click(function () {
        var thURL = '@Url.Action("AddFinancialYear", "Budget")'
        $('#grid').find('tr').each(function () {
            $.get(thURL, function (data) {
                console.log(data);
                $(this).find('#thRemarks').before('<th>' + data + '</th>');
            });
            $('#thYearlyCost').load(thURL);
        });
    })

    $("#btnAddNewTenderDetails").click(function () {
        var url = '@Url.Action("AddTenderDetails", "ProjectDetail")';
        $.ajax({
            url: url,
            type: 'POST',
            cache: false,
            success: function (html) {
                $('#dvTenderDetails #grid tbody').append("<tr>" + html + "</tr>");

                $('#dvTenderDetails .table tbody tr .tndrComDate input').unbind().change(CalcualteTenderCompletionDays);
                $('#dvTenderDetails .table tbody tr .tndrComDays input').unbind().focusout(CalculateTenderCompletionDate);

            }
        });
    })

    $("#btnAddProjectDetails").click(function () {
        var budgetId = $('#BudgetId').val();
        var url = '@Url.Action("AddProjectDetails", "ProjectDetail")';
        $.ajax({
            data: { budgetId: budgetId },
            url: url,
            type: 'POST',
            //data: { procuremenTypeId: procurementTypeId, procurementMethodId: procurementMethodId, sourceOfFundId: sourceOfFundId, approvalAuthorityId: approvalAuthorityId, packageNo: packageNo, packageName: packageName, unit: unit, quantity: quantity, estimatedCost: estimatedCost },
            cache: false,
            success: function (html) {
                $('#dvProjectDetails #grid tbody').append("<tr>" + html + "</tr>");
            }
        });
    })

    $('#dvTimeExtension table thead tr th button').click(function () {
        var url = '@Url.Action("AddProjectTimeExtension", "ProjectDetail")';
        $.ajax({
            datatype: "text",
            url: url,
            type: 'POST',
            //data: { procuremenTypeId: procurementTypeId, procurementMethodId: procurementMethodId, sourceOfFundId: sourceOfFundId, approvalAuthorityId: approvalAuthorityId, packageNo: packageNo, packageName: packageName, unit: unit, quantity: quantity, estimatedCost: estimatedCost },
            cache: false,
            success: function (html) {
                $('#dvTimeExtension #grid tbody').append(html);

                $('#dvTimeExtension #grid tbody tr .ex-date-field :input').unbind().change(ChangeExpectedCompletionDate);
                $('#dvTimeExtension #grid tbody tr .day-field :input').unbind().focusout(DayCalculation);
                $('#dvTimeExtension #grid tbody tr .control-field button').unbind().click(DeleteExtensionRow);
            }
        });
    })




    @*$('#btnSave').click(function (event) {
        event.preventDefault();
        $.validator.unobtrusive.parse($('#frm'));
        if ($('#frm').valid()) {
            var url = '@Url.Action("SaveProjectDetails", "ProjectDetail")';
            var form = $('#frm');
            var serializedForm = form.serialize();
            $.post(url, serializedForm, function (obj) {  //Post to action
                if (obj != null) {
                    if (obj.IsError == false) {
                        $('.message').html("<b>" + obj.Message + "</b>").css("color", "green");
                        //ResetForm();
                    }
                    else {
                        $('.message').html("<b>" + obj.Message + "</b>").css("color", "red");
                    }

                }

            });
        }
    })*@







    @*$('#btnUpdate').click(function (event) {
        event.preventDefault();
        $.validator.unobtrusive.parse($('#frm'));
        if ($('#frm').valid()) {
            var url = '@Url.Action("Update", "ProjectDetail")';
            var form = $('#frm');
            var serializedForm = form.serialize();
            $.post(url, serializedForm, function (obj) {  //Post to action
                if (obj != null) {
                    if (obj.IsError == false) {
                        $('.message').html("<b>" + obj.Message + "</b>").css("color", "green");
                        //ResetForm();
                    }
                    else {
                        $('.message').html("<b>" + obj.Message + "</b>").css("color", "red");
                    }

                }

            });
        }
    })*@




    function DeleteTenderDetail(el, id, url) {
        if (id == 0) {

        }
        else {
            url = url + '/' + id;
            $.ajax({
                url: url,
                type: 'POST',
                cache: false,
                success: function (obj) {
                    if (obj != null) {
                        if (obj.IsError == false) {
                            $('.message').html("<b>" + obj.Message + "</b>").css("color", "green");
                        }
                        else {
                            $('.message').html("<b>" + obj.Message + "</b>").css("color", "red");
                        }
                    }
                }

            });
            $(el).parent().parent().remove();
        }
    }



    function GetTotalPrice() {
        var sum = 0;
        $('#dvTenderDetails #grid tbody tr .tender-price :input').each(function () {

            var value = $(this).val();
            if (!isNaN(value) && value.length != 0) {
                sum += parseFloat(value);
            }
        });
        $("#lblTotalCost").text(sum.toFixed(2));
    }



    $('#btnPrint').on('click', function () {
        ShowPrintBudgetPopUp();
    })

    function ShowPrintBudgetPopUp() {
        var url = '@Url.Action("ShowProjectPrintPopUp", "ProjectDetail")';
        //var budgetDetailsId = $('#Id').val();
        $.ajax({
            url: url,
            type: 'POST',
            //data: { budgetDetailId: budgetDetailsId },
            cache: false,
            success: function (result) {
                $('#dvPrintProject').html(result);
                $("#dvPrintProject").dialog('open');
            }
        })
    }

    var DayCalculation = function () {

        var noOfDay = $(this).val();
        var startDate = $(this).closest('tr').prev().find('.date-field :input').val();
        if (typeof startDate === "undefined") {
            startDate = $('#CompletionDate').val();
            if (typeof startDate === "undefined") {
                $(this).val(0);
                CalculateTotalTimeExtension();
                return false;
            }
            else {
                var newDate = getdate(noOfDay, startDate);
                $(this).closest('tr').find('.ex-date-field :input[type=text]').val(newDate);
                $(this).closest('tr').find('.date-field :input[type=text]').val(newDate);
                CalculateTotalTimeExtension();
                return false;
            }
        }
        if (noOfDay >= 0) {
            var newDate = getdate(noOfDay, startDate);
            $(this).closest('tr').find('.ex-date-field :input[type=text]').val(newDate);
            $(this).closest('tr').find('.date-field :input[type=text]').val(newDate);
        }
        else {
            $(this).val(0);
            $(this).closest('tr').find('.ex-date-field :input[type=text]').val(startDate);
            $(this).closest('tr').find('.date-field :input[type=text]').val(startDate);
        }

        $(this).closest('tr').nextAll().each(function () {
            $(this).find('.day-field :input').trigger('focusout');
        })
        CalculateTotalTimeExtension();
    }

    $('#dvTimeExtension table tbody .day-field :input').focusout(DayCalculation);

    var ChangeExpectedCompletionDate = function () {
        //debugger;
        var startDate = $(this).closest('tr').prev().find('.ex-date-field :input').val();
        var endDate = $(this).val();

        if (startDate > endDate) {
            var newDate = getdate(0, startDate);
            $(this).closest('tr').find('.ex-date-field :input[type=text]').val(startDate);
            $(this).closest('tr').find('.date-field :input[type=text]').val(startDate);
        }
        else {

            if (typeof startDate === "undefined") {
                startDate = $('#CompletionDate').val();
                if (typeof startDate === "undefined") {
                    $(this).val(0);
                    CalculateTotalTimeExtension();
                    return false;
                }
                else {
                    var diff = GetDateDifference(endDate, startDate);
                    var prevRow = $(this).closest('tr').prev();
                    $(this).closest('tr').find('.day-field :input').val(diff);
                    $(this).closest('tr').find('.date-field :input').val(endDate);
                }
            }
            else {

                var diff = GetDateDifference(endDate, startDate);
                var prevRow = $(this).closest('tr').prev();
                $(this).closest('tr').find('.day-field :input').val(diff);
                $(this).closest('tr').find('.date-field :input').val(endDate);
            }
        }
        $(this).closest('tr').nextAll().each(function () {
            $(this).find('.ex-date-field :input').trigger('change');
        })
        CalculateTotalTimeExtension();
    }

    $('.ex-date-field input[type="text"]').change(ChangeExpectedCompletionDate);

    var CalculateTotalTimeExtension = function () {

        var sum = 0;
        $('#dvTimeExtension table tbody tr .day-field :input[type="text"]').each(function () {
            var extDays = parseInt($(this).val());
            sum = parseInt(sum) + parseInt(extDays);
        })
        $('#dvTimeExtension table tfoot .total-time-extension :input').val(sum);
        //$('#TimeExtensionInDays').val(sum);

        //var completionDate = $('#dvTimeExtension table tbody tr .date-field :input[type="text"]:last').val();
        //$('#CompletionDate').val(completionDate);
        //$('#CompletionDate').trigger('change');
    }


    function getdate(noOfDays, previousDate) {
        var tt = $('#DateOfCommencement').val();
        var daysToAdd = parseInt(noOfDays);
        var date = new Date(previousDate);
        var newdate = new Date(date);

        newdate.setDate(newdate.getDate() + daysToAdd);

        var dd = newdate.getDate();
        var mm = newdate.getMonth() + 1;
        var y = newdate.getFullYear();

        var month = mm.toString();
        var day = dd.toString();

        if (day.length === 1) {
            dd = "0" + dd;
        }
        if (month.length === 1) {
            mm = "0" + mm;
        }

        //var someFormattedDate = mm + '-' + dd + '-' + y;
        var calculatedDate = y + '-' + mm + '-' + dd;
        return calculatedDate;
    }

    var GetDateDifference = function (firstDate, secondDate) {
        var startDay = new Date(firstDate);
        var endDay = new Date(secondDate);
        var millisecondsPerDay = 1000 * 60 * 60 * 24;

        var millisBetween = startDay.getTime() - endDay.getTime();
        var days = millisBetween / millisecondsPerDay;

        return Math.floor(days);
    }

    var getPreviousDayDiff = function () {
        var sum = 0;
        $('.day-field :input').each(function () {
            var a = parseInt($(this).val());
            sum = parseInt(sum) + parseInt(a);
        })
        return sum;
    }

    var DeleteExtensionRow = function () {
        $(this).closest('tr').remove();
        CalculateTotalTimeExtension();
        return false;
    }


    $('.control-field button').click(DeleteExtensionRow);

    $('#DateOfCommencement, #CompletionDate').change(function () {
        var commencementDate = $('#DateOfCommencement').val();
        var completionDate = $('#CompletionDate').val();
        var dateDifference = GetDateDifference(completionDate, commencementDate);
        if (isNaN(dateDifference)) {
            dateDifference = 0;
        }
        $('#TimeExtensionInDays').val(dateDifference);
    })

    $('#TimeExtensionInDays').focusout(function () {
        var commencementDate = $('#DateOfCommencement').val();
        var noOfDays = $(this).val();
        var expectedCompletionDate = getdate(noOfDays, commencementDate);
        $('#CompletionDate').val(expectedCompletionDate);
    })

    var CalculateTenderCompletionDate = function () {

        var startDate = $('#DateOfCommencement').val();
        var noOfDays = $(this).val();
        if (noOfDays < 0) {
            noOfDays = 0;
            $(this).val(0);
        }
        var newDate = getdate(noOfDays, startDate);
        $(this).closest('tr').find('.tndrComDate :input').val(newDate);
    }

    $('#dvTenderDetails .table tbody tr .tndrComDays input').focusout(CalculateTenderCompletionDate);

    //$('#dvTenderDetails .table tbody tr .tndrComDate input').change(CalcualteTenderCompletionDays);
    $('#dvTenderDetails .table tbody tr .tndrComDate input[type="text"]').change(function () {
        var comDate = $(this).val();
        var startDate = $('#DateOfCommencement').val();
        if (comDate < startDate) {
            comDate = startDate;
            $(this).val(startDate);
        }
        var noOfDays = GetDateDifference(comDate, startDate);
        $(this).closest('tr').find('.tndrComDays :input').val(noOfDays);
    });

    function CalcualteTenderCompletionDays() {
        //debugger;
        var comDate = $(this).val();
        var startDate = $('#DateOfCommencement').val();
        if (comDate < startDate) {
            comDate = startDate;
            $(this).val(startDate);
        }
        var noOfDays = GetDateDifference(comDate, startDate);
        $(this).closest('tr').find('.tndrComDays :input').val(noOfDays);
    }

</script>

<script type="text/javascript">
    FormatTextBox();

</script>

<style type="text/css">
    .attachment-area .row a {
        padding: 7px 20px;
        border: 1px solid #2980b9;
        background: #2980b9;
        border-radius: 4px;
        color: #FFFFFF;
        font-weight: bold;
        text-decoration: none;
    }

        .attachment-area .row a:hover {
            background: #3498db;
        }

    #btnPrint i {
        margin-right: 10px;
    }

    table tbody button {
        padding: 2px 5px !important;
    }

    #dvZoneList ul {
        text-align: left;
        list-style-type: square;
    }

        #dvZoneList ul li {
            float: none;
            cursor: default;
            padding: 0 !important;
        }

    .date-field, ex-date-field {
        width: 220px;
    }

    .day-field {
        width: 200px;
    }

    .control-field {
        width: 50px;
    }

    textarea {
        width: 100%;
    }
    /*#dvZoneList ul li:nth-child(3n+4) {
                                clear: left;
                                float: left;
                            }*/

    table thead th {
        background: #F2F5F8 !important;
        padding: 2px;
        font-weight: bold;
        font-size: 12px !important;
        text-align: center;
        vertical-align: middle !important;
    }

    table tbody td {
        padding: 1px 2px !important;
    }

    table tfoot td {
        font-weight: bold;
        font-size: 11px !important;
        padding: 2px !important;
        vertical-align: middle !important;
    }

    .form-group input {
        width: 100%;
    }
</style>