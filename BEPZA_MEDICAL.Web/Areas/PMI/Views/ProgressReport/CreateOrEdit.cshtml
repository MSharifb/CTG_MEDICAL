@model BEPZA_MEDICAL.Web.Areas.PMI.ViewModel.ProgressReport.ProgressReportMasterViewModel
@{
    ViewBag.Title = "Progress Report";
    Layout = "~/Areas/PMI/Views/Shared/_LayoutNew.cshtml";
}
@using (Html.BeginForm(@Model.ActionType, "ProgressReport", FormMethod.Post, new { id = "frm" }))
{
    <div class="GroupBox" id="message" style="min-height:30px;">
        @Html.ValidationSummary(false, BEPZA_MEDICAL.Web.Utility.Common.ValidationSummaryHead)
        @if (!string.IsNullOrEmpty(Model.ErrMsg))
        {
        <div class="@Model.errClass">
            @Model.ErrMsg
        </div>
        }
    </div>

    <div id="dvPrintBudget">
        <iframe id="styleAdvance" src="" width="99%" height="98%" style="border: 0px solid white; padding-right: 0px;">
            <p>
                Your browser does not support iframes.
            </p>
        </iframe>
    </div>

    <div class="form-horizontal">
        @if (Model.ActionType == "Edit")
        {
        <div class="row" style="text-align:right; margin:0 0 5px 0;">
            <a href="@Url.Action("Saveas",new { id =  @Model.Id})" class="btn btn-primary" id="btnSaveas">
                <i class="fa fa-save"></i> Save as
            </a>
        </div>
        }
        <fieldset>
            <legend>Choose APP</legend>
            <div class="form-group">
                @Html.LabelFor(m => m.FinancialYearId, new { @class = "col-sm-2 control-label labelRequired" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.FinancialYearId, Model.FinancialYearList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "form-control", @required = @"required" })
                </div>

                @Html.LabelFor(m => m.StatusId, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.StatusId, Model.StatusList, @String.Format("{0}", Content.DDLOptionalLabel()), new { @class = "form-control", @required = @"required" })
                </div>
            </div>
        </fieldset>
        <fieldset>
            <span class="master-id-area">
                @Html.HiddenFor(m => m.Id)
                @Html.HiddenFor(m => m.ZoneInfoId)
                @Html.HiddenFor(m => m.ProjectForId)
                @Html.HiddenFor(m => m.AnnualProcurementPlanMasterId)
                @Html.HiddenFor(m => m.IsConfirm)
            </span>
            <div class="form-group">
                @Html.LabelFor(m => m.ReportDate, new { @class = "col-sm-2 control-label labelRequired" })
                <div class="col-sm-4">
                    @Html.EditorFor(m => m.ReportDate)
                </div>
            </div>
        </fieldset>
        <div>
            <div style="text-align:right; margin-bottom:5px;">
                <button type="button" class="btn btn-sm btn-primary" id="btnAddNewYearBilled" style="padding:3px;">
                    <i class="fa fa-plus-circle fa-lg" style="margin-right:7px;"></i>Add New Year(Billed)
                </button>
            </div>
            <fieldset>
                <div style="width: 100%; overflow-x: scroll;">
                    <table class="table table-bordered PR">
                        <thead>
                            <tr>
                                <th class="serialNo">Sl No.</th>
                                <th class="project-name">Name of Works</th>
                                <th class="Contractor-name">Name of Contractor</th>
                                <th class="estimated-amount">Approved Estimated Amount <br />(Lac)</th>
                                <th class="estimated-amount">Accepted Amount<br />(Lac)</th>
                                <th class="construction-type">Date of NOA</th>
                                <th class="construction-type">Expire date of B.G. for P.S.</th>
                                <th class="construction-type">Date of Contract Agreement</th>
                                <th class="construction-type">Date of site handing over</th>
                                <th class="construction-type">Date of Commencement</th>
                                <th class="construction-type">Completion time as per contract (Days)</th>
                                <th class="construction-type">Date of completion and time extention</th>
                                <th class="construction-type">Time Elapsed (%)</th>
                                <th class="construction-type">Physical Progress (%)</th>
                                @Html.Partial("_PartialHeadYearWiseBilled", Model.YearWiseBilledList)
                                <th class="construction-type">Work Status</th>
                                <th class="remarks">Remarks</th>
                                <th class="control-option">&nbsp;</th>
                            </tr>
                        </thead>
                    </table>
                    <div class="dvAppDetails">
                        @if (@Model.ProgressReportDetailList != null && @Model.ProgressReportDetailList.Count > 0)
                        {
                        <table class="table table-bordered">
                            <tbody>

                                @Html.Partial("_ProgressReportDetail", @Model.ProgressReportDetailList)
                            </tbody>
                        </table>
                        }
                    </div>
                </div>
            </fieldset>
        </div>
        <div class="GroupBox">

            <div class="form-group">
                @Html.LabelFor(m => m.NameofWork, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-8">
                    @Html.TextAreaFor(x => x.NameofWork, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.PreviousDate, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.EditorFor(x => x.PreviousDate, new { @class = "form-control" })
                </div>
                @Html.LabelFor(m => m.CurrentDate, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.EditorFor(x => x.CurrentDate, new { @class = "form-control" })
                </div>
            </div>
            <div class="GroupBox">
                @Html.Label("Previous Photo", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    <span class="field">
                        <input type="file" name="previous_attachment" id="previous_Attachment" />
                    </span>
                </div>
                @Html.Label("Current Photo", new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    <span class="field">
                        <input type="file" name="current_attachment" id="current_Attachment" />
                    </span>
                </div>
            </div>
            <div class="row" align="center">
                <div style="width: 70%">
                    <div class="clear"></div>
                    <div class="button-crude fixedAddButton" style="text-align: right;">
                        <input id="btnAddAttachment" type="button" value="Add" />
                    </div>

                    <div class="clear">
                    </div>
                    <table id="grid" class="contenttable">
                        <thead>
                            <tr>
                                <th>
                                    Name of Work
                                </th>
                                <th>
                                    Perevious Date
                                </th>
                                <th>
                                    Perevious Photo
                                </th>
                                <th>
                                    Current Date
                                </th>
                                <th>
                                    Current Photo
                                </th>
                                <th>
                                    Remove
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{ if (Model.strMode == "Update") { Html.RenderPartial("_Details", Model); }}
                    </table>
                </div>
                <div class="clear" style="height:10px">
                </div>
            </div>
        </div>
        <fieldset>
            <legend>Add for signature</legend>
            <div>
                <table class="table table-bordered" style="width:100%">

                    <thead style="height:10px!important">
                        <tr style="height:10px!important">
                            <th style="width: 70%">Employee Name & Department</th>
                            <th></th>
                        </tr>
                    </thead>

                    <tbody>
                        @{
                            if (Model.ApproverList != null && Model.ApproverList.Any())
                            {
                                foreach (var x in Model.ApproverList)
                                {
                        @Html.Partial("_PartialEmployeeList", x);
                                }
                            }
                        }

                    </tbody>
                </table>
            </div>
        </fieldset>
    </div>
    <div class="form-horizontal">
        @if (@Model.Id > 0)
        {
            <div class="form-group">
                <div class="col-sm-12 text-center">
                    <a href="@Url.Action("Confirm", new { id = @Model.Id })" class="btn btn-success" id="btnConfirm">
                        <i class="fa fa-check-circle"></i> Confirm
                    </a>
                </div>
            </div>}
        @if (!@Model.IsConfirm)
        {
            <div class="form-group">
                <div class="col-sm-12 col-sm-offset-0 text-center">
                    @if ((new BEPZA_MEDICAL.Web.Utility.AppConstant()).IsAddAssigned)
                    {
                        <button class="btn btn-primary" type="submit" value="Save" id="btnSave" name="btnSubmit"><i class="fa fa-save"></i> Save</button>
                        <button class="btn btn-primary" type="submit" value="Update" id="btnUpdate" name="btnSubmit"><i class="fa fa-edit"></i> Update</button>
                    }
                    <button class="btn btn-primary" type="button" value="Clear" id="btnClear" name="btnClear"><i class="fa fa-refresh"></i> Clear</button>
                </div>
            </div>
        }
    </div>
    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-sm-4 col-sm-offset-0 text-left">
                <a href="@Url.Action("Index")" class="btn btn-primary"> <i class="fa fa-backward"></i> Back</a>
            </div>
        </div>
    </div>
                            }

<script type="text/javascript">
    $(function () {
        if ('@Model.strMode' == 'Update') {
            $('#btnSave').hide();
        }
        else {
            $('#btnUpdate').hide();
            $('#btnPrint').hide();
        }
        ShowMessage('@Model.ActionType');
    });
    if ('@Model.ErrMsg' != "") {

        if ('@Model.IsError' == '1') {

        }
        else {
            $('#message2').html("<b style='color:green'>" + '@Model.ErrMsg' + "</b>");
        }
    }

    var ShowMessage = function (actionType) {

        var url = window.location.href.split('/');
        var messageType = "";
        switch (actionType) {
            case "Edit":
                var aa = url[url.length - 1];
                if (aa.toLowerCase().indexOf("?") >= 0) {
                    var baseUrl = aa.split('?');
                    var typeName = baseUrl[1].split('=');
                    messageType = typeName[1];
                    if (messageType == "success") {

                    }
                }
                break;
        }

        if (messageType === "success") {
            $('#message').html("Information has been Saved / Updated successfully");
            $('#message').css({ "color": "green", "font-weight": "bold" });
        }
        if (messageType === "failed") {
            $('#message').html("Information Save / Update Failed.");
            $('#message').css({ "color": "red", "font-weight": "bold" });
        }

    }

    $(function () {
        var Url = window.location.href;
        $("#btnClear").click(function (event) {
            event.preventDefault();
            window.location.href = Url;
        });
    });

    $(document).ready(function () {
        $("#dvPrintBudget").dialog({ autoOpen: false, modal: true, height: 500, width: 600, title: 'Print Budget', beforeclose: function (event, ui) { Closing(this); } });
    });

    $('#btnAddNewYearBilled').click(function () {
        GenerateHeadBilled();
    });

    $(document).ready(function () {
        MakeDropdownSearchable();
        setTimeout(function () {
            $('table tbody tr .control-option .add-button button').unbind().click(AddNewItemInformation);
            $('.control-option .delete-button button').unbind().click(RemoveItemInformation);
        });
    });

    var financialYearChangeBilled = function () {
        var fyId = $(this).val();
        var colIndex = $(this).closest('th').prevAll().length;

        $('table tbody td:nth-child(' + (colIndex + 2) + ')').find('.financial-year :input').val(fyId);
        console.log($('table tbody td:nth-child(' + (colIndex + 1) + ')').find('.financial-year :input'));
        return false;
    };

    $('.yearly-billed-head .financial-year select').change(financialYearChangeBilled);

    var AddYearlyHeadBilled = function (position) {
        var headUrl = '@Url.Action("AddNewFinancialYearHeadBilled", "Budget")';
        $.ajax({
            url: headUrl,
            datatype: 'text',
            type: 'POST',
            cache: false,
            success: function (html) {
                $('table thead').find('th').eq(position).before(html);

                $('.yearly-billed-head .financial-year select').unbind().change(financialYearChangeBilled);
                $('.yearly-billed-head .delete-button button').unbind().click(DeleteYearlyBilled);

                $('.yearly-billed-head .financial-year select').trigger('change');
            }
        })
    }

    var AddYearlyBilled = function (position, idValue, tr) {
        var url = '@Url.Action("AddNewFinancialYearBilled", "Budget")';

        $.ajax({
            url: url,
            type: 'POST',
            datatype: 'text',
            data: { noOfFinancialYear: 1, id: idValue },
            cache: false,
            success: function (html) {
                $(tr).find('td').eq(position).before(html);
            }
        })
    }

    function GenerateHeadBilled() {

        var numCols = $("table").find('tr')[0].cells.length;
        var position = numCols - 3; // 8 + $('.yearly-cost-head').length + $('.yearly-billed-head').length;

        AddYearlyHeadBilled(position);

        $('.dvAppDetails table tbody tr').each(function () {
            idValue = $(this).find('.budget-sub-head .test :input').val();
            var tr = $(this).closest('tr');
            AddYearlyBilled(position, idValue, tr);
        });
        $('.budget-sub-head select').trigger('change');

        $('.yearly-billed-head .delete-button button').unbind().click(DeleteYearlyBilled);

        $('.yearly-billed-head .financial-year select').trigger('change');
    };

    var DeleteYearlyBilled = function () {
        var colIndex = $(this).closest('th').prevAll().length + 1;
        $('table thead th:nth-child(' + (colIndex) + ')').remove();
        $('table tbody td:nth-child(' + (colIndex) + ')').remove();
        return false;
    }

    $('.delete-button button').click(DeleteYearlyBilled);

    function SetRequiredAttr() {
        $('.td-name-of-work :input').attr('required', true);
        $('.tdBudgetAmount :input').attr('required', true);
    }

    $('#btnPrint').click(function () {
        var budgetMasterId = $('#Id').val();
        if (budgetMasterId == 0 || budgetMasterId == '') {
            var message = 'Please save a budget to view/print report';
            $('.message').html("<b>" + message + "</b>").css("color", "red");
            return;
        }
        ShowPrintBudgetPopUp();
    });

    function ShowPrintBudgetPopUp() {
        var url = '@Url.Action("ShowBudgetPrintPopUp", "Budget")';
        var budgetDetailsId = $('#Id').val();
        $.ajax({
            url: url,
            type: 'POST',
            data: { budgetDetailId: budgetDetailsId },
            cache: false,
            success: function (result) {
                $('#dvPrintBudget').html(result);
                $("#dvPrintBudget").dialog('open');
            }
        })
    };

    function MakeDropdownSearchable() {
        $('#FinancialYearId, #StatusId').select2();
    }

    var AddNewItemInformation = function () {
        var eTbody = $(this).closest('tr');
        var url = '@Url.Action("AddNewProgressReport", "ProgressReport")';
        var columnCountBilled = $('.yearly-billed-head').length;

        $.ajax({
            url: url,
            data: { noOfFinancialYearBilled: columnCountBilled },
            type: 'POST',
            cache: false,
            success: function (result) {
                eTbody.after("<tr>" + result + "</tr>");

                $('.yearly-billed-head .financial-year select').unbind().change(financialYearChangeBilled);

                $('.yearly-billed-head .financial-year select').trigger('change');

                $('table tbody tr .control-option .add-button button').unbind().click(AddNewItemInformation);
                $('.control-option .delete-button button').unbind().click(RemoveItemInformation);
            }
        })
    }
    $('table tbody tr .control-option .add-button button').click(AddNewItemInformation);

    var RemoveItemInformation = function () {
        $(this).closest('tr').remove();
        return false;
    }
    $('.control-option .delete-button button').click(RemoveItemInformation);
</script>

<script type="text/javascript">
    $("#FinancialYearId").on('change', function () {
        var financialYearId = $("#FinancialYearId").val();
        var statusId = $("#StatusId").val();

        getAppListByFinStatus(financialYearId, statusId);
        setAppMasterId(financialYearId, statusId);
    });

    $("#StatusId").on('change', function () {
        var financialYearId = $("#FinancialYearId").val();
        var statusId = $("#StatusId").val();

        getAppListByFinStatus(financialYearId, statusId);
        setAppMasterId(financialYearId, statusId);
    });

    function getAppListByFinStatus(financialYearId, statusId) {

        $('.dvAppDetails').empty();
        var url = '@Url.Action("AddNewItemFromAPP", "ProgressReport")';
        var columnCount = 0;
        if (financialYearId > 0 && statusId > 0) {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'text',
                data: { financialYearId: financialYearId, statusId: statusId},
                cache: false,
                success: function (html) {
                    $('.dvAppDetails').append('<table class="table table-bordered"><tbody>' + html + '</tbody></table>');
                    $('table tbody tr .control-option .add-button button').unbind().click(AddNewItemInformation);
                    $('.control-option .delete-button button').unbind().click(RemoveItemInformation);
                }
            })
        }
    }

    function setAppMasterId(financialYearId, statusId) {
        if (financialYearId > 0 && statusId > 0) {
            $.getJSON('@Url.Action("GetAppMasterId", "ProgressReport")',
                { financialYearId: financialYearId, statusId: statusId },
                function (data) {
                    console.log(data);
                    $("#AnnualProcurementPlanMasterId").val(data);
                });
        }
    }

    var DayCalculation = function () {

        var noOfDay = $(this).val();
        var startDate = $(this).closest('tr').find('.date-Of-commencement :input').val();
        //debugger;
        if (noOfDay >= 0 && startDate!="") {
            var newDate = getdate(noOfDay, startDate);
            $(this).closest('tr').find('.date-Of-completion :input[type=text]').val(newDate);
        }
        //$(this).closest('tr').nextAll().each(function () {
        //    $(this).find('.day-field :input').trigger('focusout');
        //})
    }

    $('.dvAppDetails table tbody .day-field :input').focusout(DayCalculation);

    function getdate(noOfDays, previousDate) {
        var tt = $('#DateOfCommencement').val();
        var daysToAdd = parseInt(noOfDays);
        var date = new Date(previousDate);
        var newdate = new Date(date);

        newdate.setDate(newdate.getDate() + daysToAdd);

        var dd = newdate.getDate();
        var mm = newdate.getMonth() + 1;
        var y = newdate.getFullYear();

        var month = mm.toString();
        var day = dd.toString();

        if (day.length === 1) {
            dd = "0" + dd;
        }
        if (month.length === 1) {
            mm = "0" + mm;
        }

        //var someFormattedDate = mm + '-' + dd + '-' + y;
        var calculatedDate = y + '-' + mm + '-' + dd;
        return calculatedDate;
    }

</script>

<script type="text/javascript">


    $('#btnAddAttachment').on('click', function (e) {
        e.preventDefault();
        //$("#message").empty();
        //$("#RefNo").removeClass("border-red");
        //$("#Date").removeClass("border-red");
        //$("#Subject").removeClass("border-red");

        var progressReportId = $('#Id').val();
        var nameofWork = $('#NameofWork').val();
        var previousDate = $("#PreviousDate").val();
        var currentDate = $("#CurrentDate").val();

        var url = '@Url.Action("AddAttachemnt", "ProgressReport")';

        //another way
        var xhr = new XMLHttpRequest();
        var fd = new FormData();
        fd.append("ProgressReportId", progressReportId);
        fd.append("NameofWork", nameofWork);
        fd.append("PreviousDate", previousDate);
        fd.append("CurrentDate", currentDate);
        fd.append("PreviousFile", document.getElementById('previous_Attachment').files[0]);
        fd.append("CurrentFile", document.getElementById('current_Attachment').files[0]);

        xhr.open("POST", url, true);
        xhr.send(fd);
        xhr.addEventListener("load", function (event) {
            if (event.target.response != 'Invalid') {
                $("#grid tbody").append(event.target.response);

                //$('#RefNo').val('');
                //$("#Date").val('');
                //$("#Subject").val('');
                //$("#Details").val('');
                //$("#Attachment").val('');

                //$("#RefNo").removeClass("border-red");
                //$("#Date").removeClass("border-red");
            }

        }, false);
    });

    function RemoveDb(el, id, url) {
        $("#message").empty();

        if (id == 0 || id == undefined) {
            $(el).parent().parent().remove();
        }
        else {
            $.ajax({
                url: url,
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify({ Id: id }),
                contentType: "application/json; charset=utf-8",
                error: function () {
                    $("#message").html("<div class=\"validation-summary-errors\" data-valmsg-summary=\"true\"> <span> System Error!</span>  </div> ");
                },
                success: function (result) {
                    var errMsg = result.Message;
                    var errg = result.Success;
                    if (errg) {
                        $("#message").html('<b style=\"color:Green\">' + errMsg + '</b>');
                        $(el).parent().parent().remove();
                    }
                    else {
                        $("#message").html('<b style=\"color:red\">' + errMsg + '</b>');
                    }
                }
            });
        }

    }
</script>


<style type="text/css">
    table thead th {
        background: #2980b9 !important;
        font-weight: bold !important;
        font-size: 11px !important;
        /*height: 100px;*/
        vertical-align: middle !important;
        display: table-cell;
        text-align: center;
        color: #FFFFFF;
    }
        /*.PR>tbody, .PR>thead
        {
            display: block;
        }


    .dvAppDetails{
           min-width: 2500px;
           max-width: 100%;
           overflow: auto;
           overflow-x:hidden;
           max-height: 500px;

    }*/
        table thead th:hover {
            cursor: default;
        }

    .project-name {
        /*max-width: 250px;*/
        min-width: 250px;
        padding: 1px !important;
    }

    .Contractor-name {
        width: 100px;
        max-width: 100px;
        min-width: 100px;
        padding: 1px !important;
    }

    .project-name textarea {
        width: 100%;
    }

    .project-name select {
        width: 100%;
    }

    .construction-type {
        /*width: 100px;
        max-width: 100px;*/
        padding: 1px !important;
        min-width: 120px;
        max-width: 120px;
    }

    .day-field {
        padding: 1px !important;
        min-width: 120px;
        max-width: 120px;
    }

    .date-Of-commencement {
        padding: 1px !important;
        min-width: 120px;
        max-width: 120px;
    }

    .date-Of-completion {
        padding: 1px !important;
        min-width: 120px;
        max-width: 120px;
    }

    .budget-amount {
        width: 100px;
        min-width: 100px;
        padding: 1px !important;
        max-width: 100px;
        word-wrap: break-word;
    }

        .budget-amount input[type=text] {
            text-align: right;
            width: 100%;
        }

    .estimated-amount {
        width: 100px;
        min-width: 100px;
        padding: 1px !important;
        max-width: 100px;
        /*word-wrap: break-word;*/
    }

    .contract-amount {
        width: 100px;
        min-width: 100px;
        padding: 1px !important;
        max-width: 100px;
        word-wrap: break-word;
    }

    .billed-amount {
        width: 100px;
        min-width: 100px;
        padding: 1px !important;
        max-width: 100px;
        word-wrap: break-word;
    }


    .remarks {
        max-width: 200px;
        min-width: 200px;
        padding: 1px !important;
    }

        .remarks input[type=text] {
            width: 100%;
        }

    .control-option {
        max-width: 65px;
        width: 65px;
        min-width: 65px;
        padding: 1px !important;
    }

    .budget-sub-head {
        width: 150px;
        max-width: 150px;
        min-width: 150px;
        padding: 1px !important;
    }

    .sub-ledger {
        width: 150px;
        max-width: 150px;
        min-width: 150px;
        padding: 1px !important;
    }

    .serialNo {
        max-width: 50px;
        /*max-width: 50px;*/
        min-width: 50px;
        padding: 1px !important;
    }

    .yearly-cost-head {
        padding: 1px !important;
        /*min-width: 105px;*/
        max-width: 105px;
        min-width: 105px;
        font-weight: bold !important;
        font-size: 11px !important;
        color: #FFFFFF;
    }

    .yearly-billed-head {
        padding: 1px !important;
        /*min-width: 105px;*/
        max-width: 105px;
        min-width: 105px;
        font-weight: bold !important;
        font-size: 11px !important;
        color: #FFFFFF;
    }

    .yearly-cost {
        max-width: 105px;
        min-width: 105px;
        padding: 1px !important;
    }

    .yearly-billed {
        max-width: 105px;
        min-width: 105px;
        padding: 1px !important;
    }

    .yearly-cost input[type=text] {
        text-align: right;
        width: 100%;
    }

    .yearly-billed input[type=text] {
        text-align: right;
        width: 100%;
    }

    .yearly-cost-head .yearly-billed-head .fy-name input[type=text] {
        text-align: center !important;
        cursor: default;
        border: none;
        font-weight: bold;
        font-size: 11px;
        background: #2980b9;
        color: #FFFFFF;
    }

    .yearly-cost-head select {
        font-weight: bold;
        font-size: 11px;
        min-width: 105px;
    }

    .yearly-billed-head select {
        font-weight: bold;
        font-size: 11px;
        min-width: 105px;
    }

    .yearly-cost-head .lbl {
        text-align: center;
        word-wrap: break-word;
    }

    .yearly-cost-head input[type=text] {
        text-align: center;
        background: none;
        border: none;
        font-weight: bold !important;
        font-size: 11px !important;
        color: #FFFFFF;
    }

    .head-devider {
        padding: 0;
        border: none;
        border-top: medium double #908c8c;
        color: #333;
        text-align: center;
    }

        .head-devider:before { /* Not really supposed to work, but does */
            content: "***";
            display: inline-block;
            position: relative;
            top: -0.7em;
            font-size: 1.5em;
            padding: 0 0.25em;
            background: white;
        }

    #dvFinancialYear table {
        border: 1px solid #5789B3 !important;
    }

        #dvFinancialYear table thead th {
            height: 15px !important;
            background: #5789B3 !important;
            font-weight: bold !important;
            font-size: 12px !important;
            color: #FFFFFF !important;
        }

        #dvFinancialYear table tbody tr td {
            font-size: 12px !important;
            height: 15px !important;
            vertical-align: top;
        }

    table tbody tr td:hover {
        cursor: default;
    }

    .select2-selection {
        border-radius: 0px !important;
        padding: 0px 2px !important;
        border: 1px solid #D2D6DE !important;
    }

    .my-button {
        min-width: 100px;
        width: 100px;
    }

    .select2-results__option {
        font-size: 13px;
    }

    .select2-container--default .select2-selection--single {
        padding: 1px 5px;
        font-size: 13px;
    }

    .yearly-cost-head button {
        padding: 2px !important;
    }

        .yearly-cost-head button i {
            padding: 0 !important;
        }
</style>