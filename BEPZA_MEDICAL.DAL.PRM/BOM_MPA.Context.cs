//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BOM_MPA.DAL.PRM
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BOM_MPAPRMEntities : DbContext
    {
        public BOM_MPAPRMEntities()
            : base("name=BOM_MPAPRMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CommonConfigType> CommonConfigTypes { get; set; }
        public DbSet<PRM_AcademicGrade> PRM_AcademicGrade { get; set; }
        public DbSet<PRM_AcademicInstitute> PRM_AcademicInstitute { get; set; }
        public DbSet<PRM_AttachmentType> PRM_AttachmentType { get; set; }
        public DbSet<PRM_BankBranch> PRM_BankBranch { get; set; }
        public DbSet<PRM_BankName> PRM_BankName { get; set; }
        public DbSet<PRM_BloodGroup> PRM_BloodGroup { get; set; }
        public DbSet<PRM_CertificationCategory> PRM_CertificationCategory { get; set; }
        public DbSet<PRM_CertificationInstitute> PRM_CertificationInstitute { get; set; }
        public DbSet<PRM_Country> PRM_Country { get; set; }
        public DbSet<PRM_CountryDivision> PRM_CountryDivision { get; set; }
        public DbSet<PRM_DegreeLevel> PRM_DegreeLevel { get; set; }
        public DbSet<PRM_Designation> PRM_Designation { get; set; }
        public DbSet<PRM_Discipline> PRM_Discipline { get; set; }
        public DbSet<PRM_District> PRM_District { get; set; }
        public DbSet<PRM_Division> PRM_Division { get; set; }
        public DbSet<PRM_EmpCertification> PRM_EmpCertification { get; set; }
        public DbSet<PRM_EmpContractPersonInfo> PRM_EmpContractPersonInfo { get; set; }
        public DbSet<PRM_EmpDegree> PRM_EmpDegree { get; set; }
        public DbSet<PRM_EmpDesignationChangeInfo> PRM_EmpDesignationChangeInfo { get; set; }
        public DbSet<PRM_EmpExperience> PRM_EmpExperience { get; set; }
        public DbSet<PRM_EmpJobSkill> PRM_EmpJobSkill { get; set; }
        public DbSet<PRM_EmploymentStatus> PRM_EmploymentStatus { get; set; }
        public DbSet<PRM_EmploymentType> PRM_EmploymentType { get; set; }
        public DbSet<PRM_EmpPhoto> PRM_EmpPhoto { get; set; }
        public DbSet<PRM_EmpReferanceGuarantor> PRM_EmpReferanceGuarantor { get; set; }
        public DbSet<PRM_EmpSalary> PRM_EmpSalary { get; set; }
        public DbSet<PRM_EmpSalaryDetail> PRM_EmpSalaryDetail { get; set; }
        public DbSet<PRM_EmpVisaPassportInfo> PRM_EmpVisaPassportInfo { get; set; }
        public DbSet<PRM_HumanResourceMapping> PRM_HumanResourceMapping { get; set; }
        public DbSet<PRM_JobLocation> PRM_JobLocation { get; set; }
        public DbSet<PRM_JobSkill> PRM_JobSkill { get; set; }
        public DbSet<PRM_JobSkillLevel> PRM_JobSkillLevel { get; set; }
        public DbSet<PRM_JobType> PRM_JobType { get; set; }
        public DbSet<PRM_KeySkill> PRM_KeySkill { get; set; }
        public DbSet<PRM_Language> PRM_Language { get; set; }
        public DbSet<PRM_LicenseType> PRM_LicenseType { get; set; }
        public DbSet<PRM_MaritalStatus> PRM_MaritalStatus { get; set; }
        public DbSet<PRM_MeasurementUnit> PRM_MeasurementUnit { get; set; }
        public DbSet<PRM_NameTitle> PRM_NameTitle { get; set; }
        public DbSet<PRM_Nationality> PRM_Nationality { get; set; }
        public DbSet<PRM_OrganizationType> PRM_OrganizationType { get; set; }
        public DbSet<PRM_ProefficiencyLevel> PRM_ProefficiencyLevel { get; set; }
        public DbSet<PRM_Profession> PRM_Profession { get; set; }
        public DbSet<PRM_PublicationArea> PRM_PublicationArea { get; set; }
        public DbSet<PRM_Relation> PRM_Relation { get; set; }
        public DbSet<PRM_Religion> PRM_Religion { get; set; }
        public DbSet<PRM_ResourceCategory> PRM_ResourceCategory { get; set; }
        public DbSet<PRM_ResourceInfo> PRM_ResourceInfo { get; set; }
        public DbSet<PRM_ResourceLevel> PRM_ResourceLevel { get; set; }
        public DbSet<PRM_ResourceType> PRM_ResourceType { get; set; }
        public DbSet<PRM_SalaryHead> PRM_SalaryHead { get; set; }
        public DbSet<PRM_SalaryHeadGroup> PRM_SalaryHeadGroup { get; set; }
        public DbSet<PRM_SalaryStructure> PRM_SalaryStructure { get; set; }
        public DbSet<PRM_SalaryStructureDetail> PRM_SalaryStructureDetail { get; set; }
        public DbSet<PRM_ShiftName> PRM_ShiftName { get; set; }
        public DbSet<PRM_SubjectGroup> PRM_SubjectGroup { get; set; }
        public DbSet<PRM_Thana> PRM_Thana { get; set; }
        public DbSet<PRM_TrainingArea> PRM_TrainingArea { get; set; }
        public DbSet<PRM_UnitSection> PRM_UnitSection { get; set; }
        public DbSet<PRM_VisaType> PRM_VisaType { get; set; }
        public DbSet<vwAccademicQlfy> vwAccademicQlfies { get; set; }
        public DbSet<PRM_EmpNominee> PRM_EmpNominee { get; set; }
        public DbSet<PRM_NomineeFor> PRM_NomineeFor { get; set; }
        public DbSet<vwEmpFamilyInfoRpt> vwEmpFamilyInfoRpts { get; set; }
        public DbSet<vwEmpCertificationRpt> vwEmpCertificationRpts { get; set; }
        public DbSet<vwEmpDegreeRpt> vwEmpDegreeRpts { get; set; }
        public DbSet<vwEmpExperienceRpt> vwEmpExperienceRpts { get; set; }
        public DbSet<vwEmpJobSkillRpt> vwEmpJobSkillRpts { get; set; }
        public DbSet<vwLanguageProficiencyRpt> vwLanguageProficiencyRpts { get; set; }
        public DbSet<PRM_GradeStep> PRM_GradeStep { get; set; }
        public DbSet<vwResourceInfo> vwResourceInfoes { get; set; }
        public DbSet<vwEmployeeFutureAnnualIncrement> vwEmployeeFutureAnnualIncrements { get; set; }
        public DbSet<vwEmployeeFutureJobExpiration> vwEmployeeFutureJobExpirations { get; set; }
        public DbSet<vwEmpSalaryStructureRpt> vwEmpSalaryStructureRpts { get; set; }
        public DbSet<PRM_CompanyInfo> PRM_CompanyInfo { get; set; }
        public DbSet<vwCompanyInformation> vwCompanyInformations { get; set; }
        public DbSet<vwPromotedEmployee> vwPromotedEmployees { get; set; }
        public DbSet<vwIncrementedEmployeeInfo> vwIncrementedEmployeeInfoes { get; set; }
        public DbSet<vwEmpForAnnualIncrement> vwEmpForAnnualIncrements { get; set; }
        public DbSet<vwEmployeeFutureJobConfirmation> vwEmployeeFutureJobConfirmations { get; set; }
        public DbSet<PRM_EmpLanguageEfficiency> PRM_EmpLanguageEfficiency { get; set; }
        public DbSet<PRM_EmpStatusChangeDetail> PRM_EmpStatusChangeDetail { get; set; }
        public DbSet<PRM_EmpNomineeDetail> PRM_EmpNomineeDetail { get; set; }
        public DbSet<PRM_DivisionHeadMaping> PRM_DivisionHeadMaping { get; set; }
        public DbSet<vwConfirmedEmpListRpt> vwConfirmedEmpListRpts { get; set; }
        public DbSet<PRM_EmpStatusChange> PRM_EmpStatusChange { get; set; }
        public DbSet<PRM_SpecialParameter> PRM_SpecialParameter { get; set; }
        public DbSet<PRM_EmpTransferInfo> PRM_EmpTransferInfo { get; set; }
        public DbSet<PRM_EmpLicenseInfo> PRM_EmpLicenseInfo { get; set; }
        public DbSet<PRM_EmpPublicationInfo> PRM_EmpPublicationInfo { get; set; }
        public DbSet<PRM_EmpFamilyMemberInfo> PRM_EmpFamilyMemberInfo { get; set; }
        public DbSet<PRM_EmpPersonalInfo> PRM_EmpPersonalInfo { get; set; }
        public DbSet<PRM_EmpSeperation> PRM_EmpSeperation { get; set; }
        public DbSet<vwEmpTrainingRpt> vwEmpTrainingRpts { get; set; }
        public DbSet<PRM_EmpAttachmentFile> PRM_EmpAttachmentFile { get; set; }
        public DbSet<PRM_EmpContractInfo> PRM_EmpContractInfo { get; set; }
        public DbSet<PRM_EmpContactFiles> PRM_EmpContactFiles { get; set; }
        public DbSet<PRM_StaffCategory> PRM_StaffCategory { get; set; }
        public DbSet<PRM_EmpTrainingInfo> PRM_EmpTrainingInfo { get; set; }
        public DbSet<PRM_TrainingTools> PRM_TrainingTools { get; set; }
        public DbSet<LMS_tblLeaveType> LMS_tblLeaveType { get; set; }
        public DbSet<PRM_JobVacancy> PRM_JobVacancy { get; set; }
        public DbSet<PRM_JobVacancyDetails> PRM_JobVacancyDetails { get; set; }
        public DbSet<vwEmpContractExtensionRpt> vwEmpContractExtensionRpts { get; set; }
        public DbSet<vwEmpPublication> vwEmpPublications { get; set; }
        public DbSet<PRM_HumanResourceRateMaster> PRM_HumanResourceRateMaster { get; set; }
        public DbSet<PRM_HumanResourceRateDetail> PRM_HumanResourceRateDetail { get; set; }
        public DbSet<PRM_EmploymentInfo> PRM_EmploymentInfo { get; set; }
        public DbSet<vwHumanResourceInfo> vwHumanResourceInfoes { get; set; }
        public DbSet<vwEmployeeInfoRpt> vwEmployeeInfoRpts { get; set; }
        public DbSet<PRM_JobGrade> PRM_JobGrade { get; set; }
        public DbSet<PRM_HumanResourceRateAssignMaster> PRM_HumanResourceRateAssignMaster { get; set; }
        public DbSet<PRM_HumanResourceRateAssignDetail> PRM_HumanResourceRateAssignDetail { get; set; }
        public DbSet<vwTransferredEmpRpt> vwTransferredEmpRpts { get; set; }
        public DbSet<EmployeeList> EmployeeLists { get; set; }
        public DbSet<PRM_EmployeeActivationHistory> PRM_EmployeeActivationHistory { get; set; }
        public DbSet<PRM_OrganogramLevel> PRM_OrganogramLevel { get; set; }
        public DbSet<PRM_OrganogramType> PRM_OrganogramType { get; set; }
    
        public virtual ObjectResult<CommonConfigGetResult> CommonCongifGet(string strDisplayName, Nullable<int> intID, string strName, string strSortBy, string strSortType, Nullable<int> startRowIndex, Nullable<int> maximumRows, ObjectParameter numTotalRows, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var strDisplayNameParameter = strDisplayName != null ?
                new ObjectParameter("strDisplayName", strDisplayName) :
                new ObjectParameter("strDisplayName", typeof(string));
    
            var intIDParameter = intID.HasValue ?
                new ObjectParameter("intID", intID) :
                new ObjectParameter("intID", typeof(int));
    
            var strNameParameter = strName != null ?
                new ObjectParameter("strName", strName) :
                new ObjectParameter("strName", typeof(string));
    
            var strSortByParameter = strSortBy != null ?
                new ObjectParameter("strSortBy", strSortBy) :
                new ObjectParameter("strSortBy", typeof(string));
    
            var strSortTypeParameter = strSortType != null ?
                new ObjectParameter("strSortType", strSortType) :
                new ObjectParameter("strSortType", typeof(string));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var maximumRowsParameter = maximumRows.HasValue ?
                new ObjectParameter("maximumRows", maximumRows) :
                new ObjectParameter("maximumRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommonConfigGetResult>("CommonCongifGet", strDisplayNameParameter, intIDParameter, strNameParameter, strSortByParameter, strSortTypeParameter, startRowIndexParameter, maximumRowsParameter, numTotalRows, numErrorCode, strErrorMsg);
        }
    
        public virtual int CommonConfigTypeDML(string strDisplayName, Nullable<int> intID, string strName, Nullable<int> intSortOrder, string strRemarks, string strUser, string strMode, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var strDisplayNameParameter = strDisplayName != null ?
                new ObjectParameter("strDisplayName", strDisplayName) :
                new ObjectParameter("strDisplayName", typeof(string));
    
            var intIDParameter = intID.HasValue ?
                new ObjectParameter("intID", intID) :
                new ObjectParameter("intID", typeof(int));
    
            var strNameParameter = strName != null ?
                new ObjectParameter("strName", strName) :
                new ObjectParameter("strName", typeof(string));
    
            var intSortOrderParameter = intSortOrder.HasValue ?
                new ObjectParameter("intSortOrder", intSortOrder) :
                new ObjectParameter("intSortOrder", typeof(int));
    
            var strRemarksParameter = strRemarks != null ?
                new ObjectParameter("strRemarks", strRemarks) :
                new ObjectParameter("strRemarks", typeof(string));
    
            var strUserParameter = strUser != null ?
                new ObjectParameter("strUser", strUser) :
                new ObjectParameter("strUser", typeof(string));
    
            var strModeParameter = strMode != null ?
                new ObjectParameter("strMode", strMode) :
                new ObjectParameter("strMode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CommonConfigTypeDML", strDisplayNameParameter, intIDParameter, strNameParameter, intSortOrderParameter, strRemarksParameter, strUserParameter, strModeParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual int UpdateEmployeeStatus(string type, Nullable<int> employeeId, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeStatus", typeParameter, employeeIdParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<SP_PRM_RptEmployeeInfo_Result> SP_PRM_RptEmployeeInfo(Nullable<int> empTypeId, string dOBFrom, string dOBTo, Nullable<int> bloodGroupId, string marriageDateFrom, string marriageDateTo, Nullable<int> staffCategoryId, string retirementDateFrom, string retirementDateTo, string gender, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var empTypeIdParameter = empTypeId.HasValue ?
                new ObjectParameter("EmpTypeId", empTypeId) :
                new ObjectParameter("EmpTypeId", typeof(int));
    
            var dOBFromParameter = dOBFrom != null ?
                new ObjectParameter("DOBFrom", dOBFrom) :
                new ObjectParameter("DOBFrom", typeof(string));
    
            var dOBToParameter = dOBTo != null ?
                new ObjectParameter("DOBTo", dOBTo) :
                new ObjectParameter("DOBTo", typeof(string));
    
            var bloodGroupIdParameter = bloodGroupId.HasValue ?
                new ObjectParameter("BloodGroupId", bloodGroupId) :
                new ObjectParameter("BloodGroupId", typeof(int));
    
            var marriageDateFromParameter = marriageDateFrom != null ?
                new ObjectParameter("MarriageDateFrom", marriageDateFrom) :
                new ObjectParameter("MarriageDateFrom", typeof(string));
    
            var marriageDateToParameter = marriageDateTo != null ?
                new ObjectParameter("MarriageDateTo", marriageDateTo) :
                new ObjectParameter("MarriageDateTo", typeof(string));
    
            var staffCategoryIdParameter = staffCategoryId.HasValue ?
                new ObjectParameter("StaffCategoryId", staffCategoryId) :
                new ObjectParameter("StaffCategoryId", typeof(int));
    
            var retirementDateFromParameter = retirementDateFrom != null ?
                new ObjectParameter("RetirementDateFrom", retirementDateFrom) :
                new ObjectParameter("RetirementDateFrom", typeof(string));
    
            var retirementDateToParameter = retirementDateTo != null ?
                new ObjectParameter("RetirementDateTo", retirementDateTo) :
                new ObjectParameter("RetirementDateTo", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRM_RptEmployeeInfo_Result>("SP_PRM_RptEmployeeInfo", empTypeIdParameter, dOBFromParameter, dOBToParameter, bloodGroupIdParameter, marriageDateFromParameter, marriageDateToParameter, staffCategoryIdParameter, retirementDateFromParameter, retirementDateToParameter, genderParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<SP_PRM_RptEmpTrainingInfo_Result> SP_PRM_RptEmpTrainingInfo(Nullable<int> trainingToolsId, Nullable<int> resourceLevelId, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var trainingToolsIdParameter = trainingToolsId.HasValue ?
                new ObjectParameter("TrainingToolsId", trainingToolsId) :
                new ObjectParameter("TrainingToolsId", typeof(int));
    
            var resourceLevelIdParameter = resourceLevelId.HasValue ?
                new ObjectParameter("ResourceLevelId", resourceLevelId) :
                new ObjectParameter("ResourceLevelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRM_RptEmpTrainingInfo_Result>("SP_PRM_RptEmpTrainingInfo", trainingToolsIdParameter, resourceLevelIdParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<SP_PRM_RptEmpListByJobSkill_Result> SP_PRM_RptEmpListByJobSkill(Nullable<int> jobSkillId, Nullable<int> efficiencyLevelId, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var jobSkillIdParameter = jobSkillId.HasValue ?
                new ObjectParameter("JobSkillId", jobSkillId) :
                new ObjectParameter("JobSkillId", typeof(int));
    
            var efficiencyLevelIdParameter = efficiencyLevelId.HasValue ?
                new ObjectParameter("EfficiencyLevelId", efficiencyLevelId) :
                new ObjectParameter("EfficiencyLevelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRM_RptEmpListByJobSkill_Result>("SP_PRM_RptEmpListByJobSkill", jobSkillIdParameter, efficiencyLevelIdParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<SP_PRM_RptJobVacancy_Result> SP_PRM_RptJobVacancy(Nullable<int> jobGradeId, string date, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var jobGradeIdParameter = jobGradeId.HasValue ?
                new ObjectParameter("JobGradeId", jobGradeId) :
                new ObjectParameter("JobGradeId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRM_RptJobVacancy_Result>("SP_PRM_RptJobVacancy", jobGradeIdParameter, dateParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<GetEmpListLongTermLeave> GetEmpListLongTermLeave(string initial, Nullable<int> divisionId, Nullable<int> employeeTypeId, Nullable<int> leaveTypeId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var initialParameter = initial != null ?
                new ObjectParameter("Initial", initial) :
                new ObjectParameter("Initial", typeof(string));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var employeeTypeIdParameter = employeeTypeId.HasValue ?
                new ObjectParameter("EmployeeTypeId", employeeTypeId) :
                new ObjectParameter("EmployeeTypeId", typeof(int));
    
            var leaveTypeIdParameter = leaveTypeId.HasValue ?
                new ObjectParameter("LeaveTypeId", leaveTypeId) :
                new ObjectParameter("LeaveTypeId", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpListLongTermLeave>("GetEmpListLongTermLeave", initialParameter, divisionIdParameter, employeeTypeIdParameter, leaveTypeIdParameter, dateFromParameter, dateToParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<GetEmployeeServiceLength> GetEmployeeServiceLength(Nullable<int> designationId, Nullable<int> divisionId, Nullable<int> employmentTypeId, string initial, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var employmentTypeIdParameter = employmentTypeId.HasValue ?
                new ObjectParameter("EmploymentTypeId", employmentTypeId) :
                new ObjectParameter("EmploymentTypeId", typeof(int));
    
            var initialParameter = initial != null ?
                new ObjectParameter("Initial", initial) :
                new ObjectParameter("Initial", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeServiceLength>("GetEmployeeServiceLength", designationIdParameter, divisionIdParameter, employmentTypeIdParameter, initialParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<GetRptEmployeeInformation> GetRptEmployeeInformation(Nullable<int> empTypeId, string dOBFrom, string dOBTo, Nullable<int> bloodGroupId, string marriageDateFrom, string marriageDateTo, Nullable<int> staffCategoryId, string retirementDateFrom, string retirementDateTo, string gender, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var empTypeIdParameter = empTypeId.HasValue ?
                new ObjectParameter("EmpTypeId", empTypeId) :
                new ObjectParameter("EmpTypeId", typeof(int));
    
            var dOBFromParameter = dOBFrom != null ?
                new ObjectParameter("DOBFrom", dOBFrom) :
                new ObjectParameter("DOBFrom", typeof(string));
    
            var dOBToParameter = dOBTo != null ?
                new ObjectParameter("DOBTo", dOBTo) :
                new ObjectParameter("DOBTo", typeof(string));
    
            var bloodGroupIdParameter = bloodGroupId.HasValue ?
                new ObjectParameter("BloodGroupId", bloodGroupId) :
                new ObjectParameter("BloodGroupId", typeof(int));
    
            var marriageDateFromParameter = marriageDateFrom != null ?
                new ObjectParameter("MarriageDateFrom", marriageDateFrom) :
                new ObjectParameter("MarriageDateFrom", typeof(string));
    
            var marriageDateToParameter = marriageDateTo != null ?
                new ObjectParameter("MarriageDateTo", marriageDateTo) :
                new ObjectParameter("MarriageDateTo", typeof(string));
    
            var staffCategoryIdParameter = staffCategoryId.HasValue ?
                new ObjectParameter("StaffCategoryId", staffCategoryId) :
                new ObjectParameter("StaffCategoryId", typeof(int));
    
            var retirementDateFromParameter = retirementDateFrom != null ?
                new ObjectParameter("RetirementDateFrom", retirementDateFrom) :
                new ObjectParameter("RetirementDateFrom", typeof(string));
    
            var retirementDateToParameter = retirementDateTo != null ?
                new ObjectParameter("RetirementDateTo", retirementDateTo) :
                new ObjectParameter("RetirementDateTo", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRptEmployeeInformation>("GetRptEmployeeInformation", empTypeIdParameter, dOBFromParameter, dOBToParameter, bloodGroupIdParameter, marriageDateFromParameter, marriageDateToParameter, staffCategoryIdParameter, retirementDateFromParameter, retirementDateToParameter, genderParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<GettingEmpForAnnualIncrement> GettingEmpForAnnualIncrement(string fromDate, string toDate, Nullable<int> employmentTypeId, Nullable<int> divisionId, Nullable<int> gradeId, Nullable<int> designationId, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var employmentTypeIdParameter = employmentTypeId.HasValue ?
                new ObjectParameter("EmploymentTypeId", employmentTypeId) :
                new ObjectParameter("EmploymentTypeId", typeof(int));
    
            var divisionIdParameter = divisionId.HasValue ?
                new ObjectParameter("DivisionId", divisionId) :
                new ObjectParameter("DivisionId", typeof(int));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(int));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GettingEmpForAnnualIncrement>("GettingEmpForAnnualIncrement", fromDateParameter, toDateParameter, employmentTypeIdParameter, divisionIdParameter, gradeIdParameter, designationIdParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<GetEmployeeListOfRetirement> GetEmployeeListOfRetirement(Nullable<int> empTypeId, string dOBFrom, string dOBTo, Nullable<int> bloodGroupId, string marriageDateFrom, string marriageDateTo, Nullable<int> staffCategoryId, string retirementDateFrom, string retirementDateTo, string gender, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var empTypeIdParameter = empTypeId.HasValue ?
                new ObjectParameter("EmpTypeId", empTypeId) :
                new ObjectParameter("EmpTypeId", typeof(int));
    
            var dOBFromParameter = dOBFrom != null ?
                new ObjectParameter("DOBFrom", dOBFrom) :
                new ObjectParameter("DOBFrom", typeof(string));
    
            var dOBToParameter = dOBTo != null ?
                new ObjectParameter("DOBTo", dOBTo) :
                new ObjectParameter("DOBTo", typeof(string));
    
            var bloodGroupIdParameter = bloodGroupId.HasValue ?
                new ObjectParameter("BloodGroupId", bloodGroupId) :
                new ObjectParameter("BloodGroupId", typeof(int));
    
            var marriageDateFromParameter = marriageDateFrom != null ?
                new ObjectParameter("MarriageDateFrom", marriageDateFrom) :
                new ObjectParameter("MarriageDateFrom", typeof(string));
    
            var marriageDateToParameter = marriageDateTo != null ?
                new ObjectParameter("MarriageDateTo", marriageDateTo) :
                new ObjectParameter("MarriageDateTo", typeof(string));
    
            var staffCategoryIdParameter = staffCategoryId.HasValue ?
                new ObjectParameter("StaffCategoryId", staffCategoryId) :
                new ObjectParameter("StaffCategoryId", typeof(int));
    
            var retirementDateFromParameter = retirementDateFrom != null ?
                new ObjectParameter("RetirementDateFrom", retirementDateFrom) :
                new ObjectParameter("RetirementDateFrom", typeof(string));
    
            var retirementDateToParameter = retirementDateTo != null ?
                new ObjectParameter("RetirementDateTo", retirementDateTo) :
                new ObjectParameter("RetirementDateTo", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeListOfRetirement>("GetEmployeeListOfRetirement", empTypeIdParameter, dOBFromParameter, dOBToParameter, bloodGroupIdParameter, marriageDateFromParameter, marriageDateToParameter, staffCategoryIdParameter, retirementDateFromParameter, retirementDateToParameter, genderParameter, numErrorCode, strErrorMsg);
        }
    
        public virtual ObjectResult<GetEmployeeDOB> GetEmployeeDOB(Nullable<int> empTypeId, string dOBFrom, string dOBTo, Nullable<int> bloodGroupId, string marriageDateFrom, string marriageDateTo, Nullable<int> staffCategoryId, string retirementDateFrom, string retirementDateTo, string gender, Nullable<int> employmentStatusId, ObjectParameter numErrorCode, ObjectParameter strErrorMsg)
        {
            var empTypeIdParameter = empTypeId.HasValue ?
                new ObjectParameter("EmpTypeId", empTypeId) :
                new ObjectParameter("EmpTypeId", typeof(int));
    
            var dOBFromParameter = dOBFrom != null ?
                new ObjectParameter("DOBFrom", dOBFrom) :
                new ObjectParameter("DOBFrom", typeof(string));
    
            var dOBToParameter = dOBTo != null ?
                new ObjectParameter("DOBTo", dOBTo) :
                new ObjectParameter("DOBTo", typeof(string));
    
            var bloodGroupIdParameter = bloodGroupId.HasValue ?
                new ObjectParameter("BloodGroupId", bloodGroupId) :
                new ObjectParameter("BloodGroupId", typeof(int));
    
            var marriageDateFromParameter = marriageDateFrom != null ?
                new ObjectParameter("MarriageDateFrom", marriageDateFrom) :
                new ObjectParameter("MarriageDateFrom", typeof(string));
    
            var marriageDateToParameter = marriageDateTo != null ?
                new ObjectParameter("MarriageDateTo", marriageDateTo) :
                new ObjectParameter("MarriageDateTo", typeof(string));
    
            var staffCategoryIdParameter = staffCategoryId.HasValue ?
                new ObjectParameter("StaffCategoryId", staffCategoryId) :
                new ObjectParameter("StaffCategoryId", typeof(int));
    
            var retirementDateFromParameter = retirementDateFrom != null ?
                new ObjectParameter("RetirementDateFrom", retirementDateFrom) :
                new ObjectParameter("RetirementDateFrom", typeof(string));
    
            var retirementDateToParameter = retirementDateTo != null ?
                new ObjectParameter("RetirementDateTo", retirementDateTo) :
                new ObjectParameter("RetirementDateTo", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var employmentStatusIdParameter = employmentStatusId.HasValue ?
                new ObjectParameter("EmploymentStatusId", employmentStatusId) :
                new ObjectParameter("EmploymentStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDOB>("GetEmployeeDOB", empTypeIdParameter, dOBFromParameter, dOBToParameter, bloodGroupIdParameter, marriageDateFromParameter, marriageDateToParameter, staffCategoryIdParameter, retirementDateFromParameter, retirementDateToParameter, genderParameter, employmentStatusIdParameter, numErrorCode, strErrorMsg);
        }
    }
}
